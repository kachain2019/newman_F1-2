{
	"info": {
		"_postman_id": "8a9ae407-f10c-4685-90a1-785e05259e6b",
		"name": "CM (Script)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Rule Master",
			"item": [
				{
					"name": "Success case",
					"item": [
						{
							"name": "Add : Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"var reqBody = pm.request.body.raw;\r",
											"\r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Success\");\r",
											"    pm.expect(responseJson.errorMessage).to.empty;\r",
											"    pm.globals.set(\"_ruleId1\", JSON.parse(reqBody).ruleList[0].ruleId);\r",
											"    pm.globals.set(\"_ruleSeq1\", JSON.parse(reqBody).ruleList[0].ruleSeq);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"TM{{$timestamp}}\",\r\n            \"ruleSeq\": \"{{$randomBankAccount}}\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v4",
										"evSyncContractRuleMaster"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add : Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"var reqBody = pm.request.body.raw;\r",
											" \r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Success\");\r",
											"    pm.expect(responseJson.errorMessage).to.empty;\r",
											"    for(var i = 0;i < JSON.parse(reqBody).ruleList.length ;i++){\r",
											"      pm.globals.set(\"_ruleId2\", JSON.parse(reqBody).ruleList[0].ruleId);\r",
											"      pm.globals.set(\"_ruleSeq2_\"+[i], JSON.parse(reqBody).ruleList[i].ruleSeq);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"TM{{$timestamp}}\",\r\n            \"ruleSeq\": \"{{$randomBankAccount}}\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n                {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"TM{{$timestamp}}\",\r\n            \"ruleSeq\": \"{{$randomBankAccount}}\",\r\n            \"contractRuleName\": \"First Package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v4",
										"evSyncContractRuleMaster"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add : Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"var reqBody = pm.request.body.raw;\r",
											" \r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Success\");\r",
											"    pm.expect(responseJson.errorMessage).to.empty;\r",
											"    for(var i = 0;i < JSON.parse(reqBody).ruleList.length ;i++){\r",
											"      pm.globals.set(\"_ruleId3\", JSON.parse(reqBody).ruleList[0].ruleId);\r",
											"      pm.globals.set(\"_ruleSeq3_\"+[i], JSON.parse(reqBody).ruleList[i].ruleSeq);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"TM{{$timestamp}}\",\r\n            \"ruleSeq\": \"{{$randomBankAccount}}\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Ontop Hormones Limit Free\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n                {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"TM{{$timestamp}}\",\r\n            \"ruleSeq\": \"{{$randomBankAccount}}\",\r\n            \"contractRuleName\": \"Initial Package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v4",
										"evSyncContractRuleMaster"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add : Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"var reqBody = pm.request.body.raw;\r",
											" \r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Success\");\r",
											"    pm.expect(responseJson.errorMessage).to.empty;\r",
											"    for(var i = 0;i < JSON.parse(reqBody).ruleList.length ;i++){\r",
											"      pm.globals.set(\"_ruleId4\", JSON.parse(reqBody).ruleList[0].ruleId);\r",
											"      pm.globals.set(\"_ruleSeq4_\"+[i], JSON.parse(reqBody).ruleList[i].ruleSeq);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"TM{{$timestamp}}\",\r\n            \"ruleSeq\": \"{{$randomBankAccount}}\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Main Hormones Limit\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n                {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"TM{{$timestamp}}\",\r\n            \"ruleSeq\": \"{{$randomBankAccount}}\",\r\n            \"contractRuleName\": \"Min Price\",\r\n            \"contractRuleValue\": \"1500.50\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v4",
										"evSyncContractRuleMaster"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add : Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"var reqBody = pm.request.body.raw;\r",
											" \r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Success\");\r",
											"    pm.expect(responseJson.errorMessage).to.empty;\r",
											"    for(var i = 0;i < JSON.parse(reqBody).ruleList.length ;i++){\r",
											"      pm.globals.set(\"_ruleId5\", JSON.parse(reqBody).ruleList[0].ruleId);\r",
											"      pm.globals.set(\"_ruleSeq5_\"+[i], JSON.parse(reqBody).ruleList[i].ruleSeq);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"TM{{$timestamp}}\",\r\n            \"ruleSeq\": \"{{$randomBankAccount}}\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Japan DataRoam 1GB 3Days\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n                {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"TM{{$timestamp}}\",\r\n            \"ruleSeq\": \"{{$randomBankAccount}}\",\r\n            \"contractRuleName\": \"lock_order\",\r\n            \"contractRuleValue\": \"Change Promotion\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n                        {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"TM{{$timestamp}}\",\r\n            \"ruleSeq\": \"{{$randomBankAccount}}\",\r\n            \"contractRuleName\": \"lock_order\",\r\n            \"contractRuleValue\": \"Change Owner\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v4",
										"evSyncContractRuleMaster"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add : Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"var reqBody = pm.request.body.raw;\r",
											" \r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Success\");\r",
											"    pm.expect(responseJson.errorMessage).to.empty;\r",
											"    for(var i = 0;i < JSON.parse(reqBody).ruleList.length ;i++){\r",
											"      pm.globals.set(\"_ruleId6\", JSON.parse(reqBody).ruleList[0].ruleId);\r",
											"      pm.globals.set(\"_ruleSeq6_\"+[i], JSON.parse(reqBody).ruleList[i].ruleSeq);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"TM{{$timestamp}}\",\r\n            \"ruleSeq\": \"{{$randomBankAccount}}\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Smart Day Buffet 150 Baht\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n        {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"TM{{$timestamp}}\",\r\n            \"ruleSeq\": \"{{$randomBankAccount}}\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"mobileNet99Baht\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n        {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"TM{{$timestamp}}\",\r\n            \"ruleSeq\": \"{{$randomBankAccount}}\",\r\n            \"contractRuleName\": \"lock_order\",\r\n            \"contractRuleValue\": \"Change Mobile Number\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n        {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"TM{{$timestamp}}\",\r\n            \"ruleSeq\": \"{{$randomBankAccount}}\",\r\n            \"contractRuleName\": \"Min Price\",\r\n            \"contractRuleValue\": \"19500.505\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v4",
										"evSyncContractRuleMaster"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add : Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"var reqBody = pm.request.body.raw;\r",
											"\r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Success\");\r",
											"    pm.expect(responseJson.errorMessage).to.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n                {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"TM{{$timestamp}}\",\r\n            \"ruleSeq\": \"{{$randomBankAccount}}\",\r\n            \"contractRuleName\": \"lock_order\",\r\n            \"contractRuleValue\": \"Change Promotion\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n               {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"TM{{$timestamp}}\",\r\n            \"ruleSeq\": \"{{$randomBankAccount}}\",\r\n            \"contractRuleName\": \"Min Price\",\r\n            \"contractRuleValue\": \"1999.00\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v4",
										"evSyncContractRuleMaster"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete : Sucess",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"var reqBody = pm.request.body.raw;\r",
											"\r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Success\");\r",
											"    pm.expect(responseJson.errorMessage).to.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var reqBody = {\r",
											"    \"sourceSystem\": pm.environment.get(\"sourceSystem\"),\r",
											"    \"ruleList\": [\r",
											"        {\r",
											"            \"action\": \"Add\",\r",
											"            \"ruleId\": pm.variables.replaceIn('ID'+'{{$timestamp}}'),\r",
											"            \"ruleSeq\": pm.variables.replaceIn('{{$randomBankAccount}}'),\r",
											"            \"contractRuleName\": \"in_package\", \r",
											"            \"contractRuleValue\": \"Device_Android Watch\",\r",
											"            \"createBy\": pm.environment.get(\"createBy\")\r",
											"        },\r",
											"                {\r",
											"            \"action\": \"Add\",\r",
											"            \"ruleId\": pm.variables.replaceIn('ID'+'{{$timestamp}}'),\r",
											"            \"ruleSeq\": pm.variables.replaceIn('{{$randomBankAccount}}'),\r",
											"            \"contractRuleName\": \"First Package\", \r",
											"            \"createBy\": pm.environment.get(\"createBy\")\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Create dynamic variable\", function () {\r",
											"     for(var i = 0;i < reqBody.ruleList.length ;i++){\r",
											"      pm.globals.set(\"Add_ruleId\", reqBody.ruleList[0].ruleId);\r",
											"      pm.globals.set(\"Add_ruleSeq_\"+[i], reqBody.ruleList[i].ruleSeq);\r",
											"    }\r",
											"});\r",
											"\r",
											"const postRequest = {\r",
											"  url: pm.environment.get(\"url\")+pm.environment.get(\"_evSyncContractRuleMaster\"),\r",
											"  method: 'POST',\r",
											"  header: {\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw: JSON.stringify(reqBody)\r",
											"  }\r",
											"};\r",
											"pm.sendRequest(postRequest, (error, response) => {\r",
											"  console.log(error ? error : response.json());\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Delete\",\r\n            \"ruleId\": \"{{Add_ruleId}}\",\r\n            \"ruleSeq\": \"{{Add_ruleSeq_0}}\",\r\n            \"contractRuleName\": \"First Package\",\r\n            \"contractRuleValue\": \"Smart Day Buffet 150 Baht\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n                {\r\n            \"action\" : \"Delete\",\r\n            \"ruleId\": \"{{Add_ruleId}}\",\r\n            \"ruleSeq\": \"{{Add_ruleSeq_1}}\",\r\n            \"contractRuleName\": \"First Package\",\r\n            \"contractRuleValue\": \"Smart Day Buffet 150 Baht\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v4",
										"evSyncContractRuleMaster"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete : Sucess",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"var reqBody = pm.request.body.raw;\r",
											"\r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Success\");\r",
											"    pm.expect(responseJson.errorMessage).to.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var reqBody = {\r",
											"    \"sourceSystem\": pm.environment.get(\"sourceSystem\"),\r",
											"    \"ruleList\": [\r",
											"        {\r",
											"            \"action\": \"Add\",\r",
											"            \"ruleId\": pm.variables.replaceIn('ID'+'{{$timestamp}}'),\r",
											"            \"ruleSeq\": pm.variables.replaceIn('{{$randomBankAccount}}'),\r",
											"            \"contractRuleName\": \"in_package\", \r",
											"            \"contractRuleValue\": \"Device_Android Watch\",\r",
											"            \"createBy\": pm.environment.get(\"createBy\")\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"console.log(reqBody)\r",
											"pm.globals.set(\"DEL_ruleId\", reqBody.ruleList[0].ruleId);\r",
											"pm.globals.set(\"DEL_ruleSeq\", reqBody.ruleList[0].ruleSeq);\r",
											"\r",
											"const postRequest = {\r",
											"  url: pm.environment.get(\"url\")+pm.environment.get(\"_evSyncContractRuleMaster\"),\r",
											"  method: 'POST',\r",
											"  header: {\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw: JSON.stringify(reqBody)\r",
											"  }\r",
											"};\r",
											"pm.sendRequest(postRequest, (error, response) => {\r",
											"  console.log(error ? error : response.json());\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Delete\",\r\n            \"ruleId\": \"{{DEL_ruleId}}\",\r\n            \"ruleSeq\": \"{{DEL_ruleSeq}}\",\r\n            \"contractRuleName\": \"First Package\",\r\n            \"contractRuleValue\": \"Smart Day Buffet 150 Baht\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v4",
										"evSyncContractRuleMaster"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add|Delete : Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"var reqBody = pm.request.body.raw;\r",
											"\r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Success\");\r",
											"    pm.expect(responseJson.errorMessage).to.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"TM{{$timestamp}}\",\r\n            \"ruleSeq\": \"123456789012345678901234567890\",\r\n            \"contractRuleName\": \"lock_order\",\r\n            \"contractRuleValue\": \"Change Promotion\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n        {\r\n            \"action\": \"Delete\",\r\n            \"ruleId\": \"TM{{$timestamp}}\",\r\n            \"ruleSeq\": \"123456789012345678901234567890\",\r\n            \"contractRuleName\": \"Min Price\",\r\n            \"contractRuleValue\": \"1999.00\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v4",
										"evSyncContractRuleMaster"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Format",
					"item": [
						{
							"name": "action : Add",
							"item": [
								{
									"name": "Please specify data.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = {\r",
													"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"status\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"errorMessage\": {\r",
													"            \"type\": \"array\",\r",
													"            \"items\": [\r",
													"                {\r",
													"                    \"type\": \"string\"\r",
													"                }\r",
													"            ]\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\r",
													"        \"status\",\r",
													"        \"errorMessage\"\r",
													"    ],\r",
													"    \"additionalProperties\": false\r",
													"}\r",
													"\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Please specify data.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "Please specify data.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = {\r",
													"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"status\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"errorMessage\": {\r",
													"            \"type\": \"array\",\r",
													"            \"items\": [\r",
													"                {\r",
													"                    \"type\": \"string\"\r",
													"                }\r",
													"            ]\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\r",
													"        \"status\",\r",
													"        \"errorMessage\"\r",
													"    ],\r",
													"    \"additionalProperties\": false\r",
													"}\r",
													"\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Please specify data.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ruleList\" : null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "Please specify data.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = {\r",
													"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"status\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"errorMessage\": {\r",
													"            \"type\": \"array\",\r",
													"            \"items\": [\r",
													"                {\r",
													"                    \"type\": \"string\"\r",
													"                }\r",
													"            ]\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\r",
													"        \"status\",\r",
													"        \"errorMessage\"\r",
													"    ],\r",
													"    \"additionalProperties\": false\r",
													"}\r",
													"\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Please specify data.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ruleList\" : []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0814 : action (Invalid)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0814 : Addd not found.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Addd\",\r\n            \"ruleId\": \"TM{{$timestamp}}\",\r\n            \"ruleSeq\": \"{{$randomBankAccount}}\",\r\n            \"contractRuleName\": \"Min Price\",\r\n            \"contractRuleValue\" : \"T6\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0050 : contractRuleValue (Invalid)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0050 : Min Price : T6 Must be numeric only\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"TM{{$timestamp}}\",\r\n            \"ruleSeq\": \"{{$randomBankAccount}}\",\r\n            \"contractRuleName\": \"Min Price\",\r\n            \"contractRuleValue\" : \"T6\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0050 : ruleSeq (Invalid)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0050 : Rule Seq : 10.1 Must be numeric only\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"3099\",\r\n            \"ruleSeq\": \"10.1\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB1105 : First Package is require for in_package",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.environment.set(\"variable_key\", \"variable_value\");\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB1105 : First Package is require for in_package\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"TM{{$timestamp}}\",\r\n            \"ruleSeq\": \"{{$randomBankAccount}}\",\r\n            \"contractRuleName\": \"First Package\",\r\n            \"contractRuleValue\": \"New Package1\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB1105 : Initial Package is require for in_package",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB1105 : Initial Package is require for in_package\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"TM{{$timestamp}}\",\r\n            \"ruleSeq\": \"{{$randomBankAccount}}\",\r\n            \"contractRuleName\": \"Initial Package\",\r\n            \"contractRuleValue\": \"Initial Package1\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB1755",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.environment.set(\"variable_key\", \"variable_value\");\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB1755 : Upper Package rule must choose one between First package, Initial Package and Min Price.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"{{_ruleId2}}\",\r\n            \"ruleSeq\": \"{{$randomBankAccount}}\",\r\n            \"contractRuleName\": \"First Package\",\r\n            \"contractRuleValue\": \"New Package1\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB1755",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.environment.set(\"variable_key\", \"variable_value\");\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB1755 : Upper Package rule must choose one between First package, Initial Package and Min Price.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"{{_ruleId2}}\",\r\n            \"ruleSeq\": \"{{$randomBankAccount}}\",\r\n            \"contractRuleName\": \"Initial Package\",\r\n            \"contractRuleValue\": \"New Package1\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB1755",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.environment.set(\"variable_key\", \"variable_value\");\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB1755 : Upper Package rule must choose one between First package, Initial Package and Min Price.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"{{_ruleId2}}\",\r\n            \"ruleSeq\": \"{{$randomBankAccount}}\",\r\n            \"contractRuleName\": \"Min Price\",\r\n            \"contractRuleValue\": \"100.10\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB1755",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.environment.set(\"variable_key\", \"variable_value\");\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB1755 : Upper Package rule must choose one between First package, Initial Package and Min Price.\");\r",
													"        for(var i = 0;i < responseJson.errorMessage.length ;i++){\r",
													"            pm.expect(responseJson.errorMessage[i]).to.equal(\"Data set \"+[i+1]+\" | EB1755 : Upper Package rule must choose one between First package, Initial Package and Min Price.\");\r",
													"    }\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"TM{{$timestamp}}\",\r\n            \"ruleSeq\": \"{{$randomBankAccount}}\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n                {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"TM{{$timestamp}}\",\r\n            \"ruleSeq\": \"{{$randomBankAccount}}\",\r\n            \"contractRuleName\": \"First Package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n                        {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"TM{{$timestamp}}\",\r\n            \"ruleSeq\": \"{{$randomBankAccount}}\",\r\n            \"contractRuleName\": \"Initial Package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n                          {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"TM{{$timestamp}}\",\r\n            \"ruleSeq\": \"{{$randomBankAccount}}\",\r\n            \"contractRuleName\": \"Min Price\",\r\n            \"contractRuleValue\": \"99\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "action : Delete",
							"item": [
								{
									"name": "EB0050 : ruleSeq (Invalid)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0050 : Rule Seq : 199TB Must be numeric only\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Delete\",\r\n            \"ruleId\": \"3099\",\r\n            \"ruleSeq\": \"199TB\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB1105 : require for First Package **",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB1105 : Rule Id: \"+pm.globals.get('DEL_ruleId')+\", Rule Seq: \"+pm.globals.get('DEL_ruleSeq')+\" is require for First Package\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var reqBody = {\r",
													"    \"sourceSystem\": \"CM-DEV\",\r",
													"    \"ruleList\": [\r",
													"        {\r",
													"            \"action\": \"Add\",\r",
													"            \"ruleId\": pm.variables.replaceIn('DEL'+'{{$timestamp}}'),\r",
													"            \"ruleSeq\": pm.variables.replaceIn('{{$randomBankAccount}}'),\r",
													"            \"contractRuleName\": \"in_package\", \r",
													"            \"contractRuleValue\": \"Device_Android Watch\",\r",
													"            \"createBy\": pm.environment.get(\"createBy\")\r",
													"        },\r",
													"                {\r",
													"            \"action\": \"Add\",\r",
													"            \"ruleId\": pm.variables.replaceIn('DEL'+'{{$timestamp}}'),\r",
													"            \"ruleSeq\": pm.variables.replaceIn('{{$randomBankAccount}}'),\r",
													"            \"contractRuleName\": \"First Package\",\r",
													"            \"contractRuleValue\": \"Device_Android Watch\",\r",
													"            \"createBy\": pm.environment.get(\"createBy\")\r",
													"        }\r",
													"    ]\r",
													"}\r",
													"\r",
													"console.log(reqBody)\r",
													"pm.globals.set(\"DEL_ruleId\", reqBody.ruleList[0].ruleId);\r",
													"pm.globals.set(\"DEL_ruleSeq\", reqBody.ruleList[0].ruleSeq);\r",
													"\r",
													"const postRequest = {\r",
													"  url: pm.environment.get(\"url\")+pm.environment.get(\"_evSyncContractRuleMaster\"),\r",
													"  method: 'POST',\r",
													"  header: {\r",
													"    'Content-Type': 'application/json'\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'raw',\r",
													"    raw: JSON.stringify(reqBody)\r",
													"  }\r",
													"};\r",
													"pm.sendRequest(postRequest, (error, response) => {\r",
													"  console.log(error ? error : response.json());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\": \"Delete\",\r\n            \"ruleId\": \"{{DEL_ruleId}}\",\r\n            \"ruleSeq\": \"{{DEL_ruleSeq}}\",\r\n            \"createBy\": \"{{createBy}}\",\r\n            \"contractRuleName\": \"First Package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB1105 : require for Initial Package **",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB1105 : Rule Id: \"+pm.globals.get('DEL_ruleId')+\", Rule Seq: \"+pm.globals.get('DEL_ruleSeq')+\" is require for Initial Package\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var reqBody = {\r",
													"    \"sourceSystem\": \"CM-DEV\",\r",
													"    \"ruleList\": [\r",
													"        {\r",
													"            \"action\": \"Add\",\r",
													"            \"ruleId\": pm.variables.replaceIn('DEL'+'{{$timestamp}}'),\r",
													"            \"ruleSeq\": pm.variables.replaceIn('{{$randomBankAccount}}'),\r",
													"            \"contractRuleName\": \"in_package\", \r",
													"            \"contractRuleValue\": \"Device_Android Watch\",\r",
													"            \"createBy\": pm.environment.get(\"createBy\")\r",
													"        },\r",
													"                {\r",
													"            \"action\": \"Add\",\r",
													"            \"ruleId\": pm.variables.replaceIn('DEL'+'{{$timestamp}}'),\r",
													"            \"ruleSeq\": pm.variables.replaceIn('{{$randomBankAccount}}'),\r",
													"            \"contractRuleName\": \"Initial Package\",\r",
													"            \"contractRuleValue\": \"Device_Android Watch\",\r",
													"            \"createBy\": pm.environment.get(\"createBy\")\r",
													"        }\r",
													"    ]\r",
													"}\r",
													"\r",
													"console.log(reqBody)\r",
													"pm.globals.set(\"DEL_ruleId\", reqBody.ruleList[0].ruleId);\r",
													"pm.globals.set(\"DEL_ruleSeq\", reqBody.ruleList[0].ruleSeq);\r",
													"\r",
													"const postRequest = {\r",
													"  url: pm.environment.get(\"url\")+pm.environment.get(\"_evSyncContractRuleMaster\"),\r",
													"  method: 'POST',\r",
													"  header: {\r",
													"    'Content-Type': 'application/json'\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'raw',\r",
													"    raw: JSON.stringify(reqBody)\r",
													"  }\r",
													"};\r",
													"pm.sendRequest(postRequest, (error, response) => {\r",
													"  console.log(error ? error : response.json());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\": \"Delete\",\r\n            \"ruleId\": \"{{DEL_ruleId}}\",\r\n            \"ruleSeq\": \"{{DEL_ruleSeq}}\",\r\n            \"createBy\": \"{{createBy}}\",\r\n            \"contractRuleName\": \"Initial Package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Mandatory",
					"item": [
						{
							"name": "action : Add (Mandatory)",
							"item": [
								{
									"name": "EB0100 : action",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Action is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"ruleId\": \"3099\",\r\n            \"ruleSeq\": \"1\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 : ruleId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Rule Id is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleSeq\": \"11\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 : ruleSeq",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Rule Seq is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"1\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 : contractRuleName",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Contract Rule Name is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"1\",\r\n            \"ruleSeq\": \"11\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 : contractRuleValue",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Contract Rule Value is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"1\",\r\n            \"ruleSeq\": \"11\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 : createBy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Create By is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"1\",\r\n            \"ruleSeq\": \"11\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 : sourceSystem",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"EB0100 : Source system is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"1\",\r\n            \"ruleSeq\": \"11\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Create By, Rule Id, Rule Seq, Contract Rule Name is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\" : \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Create By, Rule Id, Rule Seq, Contract Rule Name is required field. Please enter a value for the field.\");\r",
													"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB0100 : Action is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\" : \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\"\r\n        },\r\n        {\r\n            \r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Create By, Rule Id, Rule Seq, Contract Rule Name is required field. Please enter a value for the field.\");\r",
													"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB0100 : Action is required field. Please enter a value for the field.\");\r",
													"    pm.expect(responseJson.errorMessage[2]).to.equal(\"Data set 3 | EB0100 : Create By, Rule Seq, Contract Rule Name is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\" : \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\"\r\n        },\r\n        {\r\n            \r\n        },\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\" : \"123\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "action : Delete (Mandatory)",
							"item": [
								{
									"name": "EB0100 : ruleId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Rule Id is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Delete\",\r\n            \"ruleSeq\": \"11\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 : createBy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Create By is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Delete\",\r\n            \"ruleId\": \"1\",\r\n            \"ruleSeq\": \"11\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 : sourceSystem",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"EB0100 : Source system is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Delete\",\r\n            \"ruleId\": \"1\",\r\n            \"ruleSeq\": \"11\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Create By, Rule Id is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\" : \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Delete\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Null",
					"item": [
						{
							"name": "action : Add (Null)",
							"item": [
								{
									"name": "EB0100 : action",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Action is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : null,\r\n            \"ruleId\": \"3099\",\r\n            \"ruleSeq\": \"1\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 : ruleId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Rule Id is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": null,\r\n            \"ruleSeq\": \"11\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 : ruleSeq",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Rule Seq is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"1\",\r\n            \"ruleSeq\": null,\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 : contractRuleName",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Contract Rule Name is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"1\",\r\n            \"ruleSeq\": \"11\",\r\n            \"contractRuleName\" : null,\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 : contractRuleValue",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Contract Rule Value is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"1\",\r\n            \"ruleSeq\": \"11\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": null,\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 : createBy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Create By is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"1\",\r\n            \"ruleSeq\": \"11\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\" : null\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 : sourceSystem",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"EB0100 : Source system is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\" : null,\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"1\",\r\n            \"ruleSeq\": \"11\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 (All Parameter)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Create By, Rule Id, Rule Seq, Contract Rule Name is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": null,\r\n            \"ruleSeq\": null,\r\n            \"contractRuleName\": null,\r\n            \"contractRuleValue\": null,\r\n            \"createBy\": null\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    // pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Rule Id, Rule Seq, Create By, Contract Rule Name, Source system is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": null,\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": null,\r\n            \"ruleSeq\": null,\r\n            \"contractRuleName\": null,\r\n            \"contractRuleValue\": null,\r\n            \"createBy\": null\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Create By, Rule Id, Rule Seq, Contract Rule Name is required field. Please enter a value for the field.\");\r",
													"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB0100 : Create By, Rule Seq, Contract Rule Name is required field. Please enter a value for the field.\");\r",
													"    pm.expect(responseJson.errorMessage[2]).to.equal(\"Data set 3 | EB0100 : Create By, Rule Seq, Contract Rule Value is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": null,\r\n            \"ruleSeq\": null,\r\n            \"contractRuleName\": null,\r\n            \"contractRuleValue\": null,\r\n            \"createBy\": null\r\n        },\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"10\",\r\n            \"ruleSeq\": null,\r\n            \"contractRuleName\": null,\r\n            \"contractRuleValue\": null,\r\n            \"createBy\": null\r\n        },\r\n                {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"10\",\r\n            \"ruleSeq\": null,\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": null,\r\n            \"createBy\": null\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "action : Delete (Null)",
							"item": [
								{
									"name": "EB0100 : ruleId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Rule Id is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Delete\",\r\n            \"ruleId\": null,\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 : createBy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Create By is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Delete\",\r\n            \"ruleId\": \"1\",\r\n            \"ruleSeq\": \"11\",\r\n            \"createBy\": null\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 : sourceSystem",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"EB0100 : Source system is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\" : null,\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Delete\",\r\n            \"ruleId\": \"1\",\r\n            \"ruleSeq\": \"11\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 (All Parameter)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Create By, Rule Id is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Delete\",\r\n            \"ruleId\": null,\r\n            \"ruleSeq\": null,\r\n            \"createBy\": null\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Create By, Rule Id is required field. Please enter a value for the field.\");\r",
													"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB0100 : Rule Id is required field. Please enter a value for the field.\");\r",
													"    pm.expect(responseJson.errorMessage[2]).to.equal(\"Data set 3 | EB0100 : Create By is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\": \"Delete\",\r\n            \"ruleId\": null,\r\n            \"ruleSeq\": null,\r\n            \"createBy\": null\r\n        },\r\n        {\r\n            \"action\": \"Delete\",\r\n            \"ruleId\": null,\r\n            \"createBy\": \"KACHAIN\"\r\n        },\r\n        {\r\n            \"action\": \"Delete\",\r\n            \"ruleId\": \"1\",\r\n            \"createBy\": null\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Empty",
					"item": [
						{
							"name": "action : Add (Empty)",
							"item": [
								{
									"name": "EB0100 : action",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Action is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"\",\r\n            \"ruleId\": \"3099\",\r\n            \"ruleSeq\": \"1\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 : ruleId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Rule Id is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"\",\r\n            \"ruleSeq\": \"11\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 : ruleSeq",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Rule Seq is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"1\",\r\n            \"ruleSeq\": \"\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 : contractRuleName",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Contract Rule Name is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"1\",\r\n            \"ruleSeq\": \"11\",\r\n            \"contractRuleName\" : \"\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 : contractRuleValue",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Contract Rule Value is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"1\",\r\n            \"ruleSeq\": \"11\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 : createBy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Create By is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"1\",\r\n            \"ruleSeq\": \"11\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\" : \"\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 : sourceSystem",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"EB0100 : Source system is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\" : \"\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"1\",\r\n            \"ruleSeq\": \"11\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"SIRIPS49\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 (All Parameter)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    // pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Rule Id, Rule Seq, Create By, Contract Rule Name, Source system is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"\",\r\n            \"ruleId\": \"\",\r\n            \"ruleSeq\": \"\",\r\n            \"contractRuleName\": \"\",\r\n            \"contractRuleValue\": \"\",\r\n            \"createBy\": \"\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Create By, Rule Id, Rule Seq, Contract Rule Name is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"\",\r\n            \"ruleSeq\": \"\",\r\n            \"contractRuleName\": \"\",\r\n            \"contractRuleValue\": \"\",\r\n            \"createBy\": \"\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Create By, Rule Id, Rule Seq, Contract Rule Name is required field. Please enter a value for the field.\");\r",
													"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB0100 : Create By, Rule Id, Rule Seq, Contract Rule Name is required field. Please enter a value for the field.\");\r",
													"    pm.expect(responseJson.errorMessage[2]).to.equal(\"Data set 3 | EB0100 : Create By, Rule Seq, Contract Rule Name is required field. Please enter a value for the field.\");\r",
													"    pm.expect(responseJson.errorMessage[3]).to.equal(\"Data set 4 | EB0100 : Create By, Contract Rule Name is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"\",\r\n            \"ruleSeq\": \"\",\r\n            \"contractRuleName\": \"\",\r\n            \"contractRuleValue\": \"\",\r\n            \"createBy\": \"\"\r\n        },\r\n                {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"\",\r\n            \"ruleSeq\": \"\",\r\n            \"contractRuleName\": \"\",\r\n            \"contractRuleValue\": \"\",\r\n            \"createBy\": \"\"\r\n        },\r\n                {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"123\",\r\n            \"ruleSeq\": \"\",\r\n            \"contractRuleName\": \"\",\r\n            \"contractRuleValue\": \"\",\r\n            \"createBy\": \"\"\r\n        },\r\n                        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"123\",\r\n            \"ruleSeq\": \"123\",\r\n            \"contractRuleName\": \"\",\r\n            \"contractRuleValue\": \"\",\r\n            \"createBy\": \"\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "action : Delete (Empty)",
							"item": [
								{
									"name": "EB0100 : ruleId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Rule Id is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Delete\",\r\n            \"ruleId\": \"\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 : createBy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Create By is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Delete\",\r\n            \"ruleId\": \"1\",\r\n            \"ruleSeq\": \"11\",\r\n            \"createBy\" : \"\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 : sourceSystem",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"EB0100 : Source system is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\" : \"\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Delete\",\r\n            \"ruleId\": \"1\",\r\n            \"ruleSeq\": \"11\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 (All Parameter)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Create By, Rule Id is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Delete\",\r\n            \"ruleId\": \"\",\r\n            \"ruleSeq\": \"\",\r\n            \"createBy\": \"\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    // pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Rule Id, Rule Seq, Create By, Contract Rule Name, Source system is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Delete\",\r\n            \"ruleId\": \"\",\r\n            \"ruleSeq\": \"\",\r\n            \"createBy\": \"\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Length",
					"item": [
						{
							"name": "action : Add (Length)",
							"item": [
								{
									"name": "EB0524 : action (30)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0814 : AddAddAddAddAddAddAddAddAddAddA not found.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"AddAddAddAddAddAddAddAddAddAddA\",\r\n            \"ruleId\": \"3099\",\r\n            \"ruleSeq\": \"1\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0524 : ruleId (30)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0524 : Invalid Length - Rule Id : 1234567890123456789012345678901\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\" : \"1234567890123456789012345678901\",\r\n            \"ruleSeq\": \"11\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0524 : ruleSeq (30)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0524 : Invalid Length - Rule Seq : 1234567890123456789012345678901\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"1\",\r\n            \"ruleSeq\" : \"1234567890123456789012345678901\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0524 : ruleId&ruleSeq (30)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0524 : Invalid Length - Rule Id : 1234567890123456789012345678901, Rule Seq : 1234567890123456789012345678901\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\" : \"1234567890123456789012345678901\",\r\n            \"ruleSeq\": \"1234567890123456789012345678901\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0524 : contractRuleName (30)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0390 : Data Not Found: Contract Rule Name: CMR123456789012345678901234567A\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"1\",\r\n            \"ruleSeq\": \"11\", \r\n            \"contractRuleName\" : \"CMR123456789012345678901234567A\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0524 : contractRuleValue (255)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0390 : Data Not Found: Contract Rule Name: in_package, Contract Rule Value: CMR123456789012345678901234567ACMR123456789012345678901234567ACMR123456789012345678901234567ACMR123456789012345678901234567ACMR123456789012345678901234567ACMR123456789012345678901234567ACMR123456789012345678901234567ACMR123456789012345678901234567AQWT\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"1\",\r\n            \"ruleSeq\": \"11\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\" : \"CMR123456789012345678901234567ACMR123456789012345678901234567ACMR123456789012345678901234567ACMR123456789012345678901234567ACMR123456789012345678901234567ACMR123456789012345678901234567ACMR123456789012345678901234567ACMR123456789012345678901234567AQWT\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0524 : createBy (30)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0390 : Data Not Found: User name: KachainKachainKachainKachainKac\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"1\",\r\n            \"ruleSeq\": \"11\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\" : \"KachainKachainKachainKachainKac\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "ู*Ignore EB0524 : sourceSystem (30)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// var responseJson = pm.response.json();\r",
													"\r",
													"// pm.test(\"Response time is less than 30000ms\", function () {\r",
													"//     pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"// });\r",
													"\r",
													"// pm.test(\"Status code is 200\", function () {\r",
													"//     pm.response.to.have.status(200);\r",
													"// });\r",
													"\r",
													"// pm.test(\"Status code name has string\", function () {\r",
													"//     pm.response.to.have.status(\"OK\");\r",
													"// });\r",
													"\r",
													"// pm.test('Schema is valid', function() {\r",
													"//   var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"//   pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"// });\r",
													"\r",
													"// pm.test(\"Check response is Correct\", function () {\r",
													"//     pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"//     pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0524 : Invalid Length - Source system : CM-dev1234567890123456789012345\");\r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\" : \"CM-dev1234567890123456789012345\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"1\",\r\n            \"ruleSeq\": \"11\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"SIRIPS49\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "action : Delete (Length)",
							"item": [
								{
									"name": "EB0390 : ruleId (30)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0524 : Invalid Length - Rule Id : 1234567890123456789012345678901\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Delete\",\r\n            \"ruleId\" : \"1234567890123456789012345678901\",\r\n            \"ruleSeq\": \"11\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0390 : ruleSeq (30)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0524 : Invalid Length - Rule Seq : 1234567890123456789012345678901\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Delete\",\r\n            \"ruleId\" : \"1\",\r\n            \"ruleSeq\": \"1234567890123456789012345678901\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0390 : ruleId,ruleSeq (30)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0524 : Invalid Length - Rule Id : 1234567890123456789012345678901, Rule Seq : 1234567890123456789012345678901\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Delete\",\r\n            \"ruleId\": \"1234567890123456789012345678901\",\r\n            \"ruleSeq\" : \"1234567890123456789012345678901\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0390 : createBy (30)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0390 : Data Not Found: User name: KachainKachainKachainKachainKac\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Delete\",\r\n            \"ruleId\": \"1\",\r\n            \"ruleSeq\": \"11\",\r\n            \"createBy\" : \"KachainKachainKachainKachainKac\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "*Ignore EB0390 : sourceSystem (30)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// var responseJson = pm.response.json();\r",
													"\r",
													"// pm.test(\"Response time is less than 30000ms\", function () {\r",
													"//     pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"// });\r",
													"\r",
													"// pm.test(\"Status code is 200\", function () {\r",
													"//     pm.response.to.have.status(200);\r",
													"// });\r",
													"\r",
													"// pm.test(\"Status code name has string\", function () {\r",
													"//     pm.response.to.have.status(\"OK\");\r",
													"// });\r",
													"\r",
													"// pm.test('Schema is valid', function() {\r",
													"//   var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"//   pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"// });\r",
													"\r",
													"// pm.test(\"Check response is Correct\", function () {\r",
													"//     pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"//     pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0524 : Invalid Length - Source system : CM-dev1234567890123456789012345\");\r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\" : \"CM-dev1234567890123456789012345\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Delete\",\r\n            \"ruleId\": \"1\",\r\n            \"ruleSeq\": \"11\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Duplicate",
					"item": [
						{
							"name": "EB1239 (ซ้ำในก้อน Req.)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
											"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB1239 : Duplicate Rule Id: 101111, Rule Seq: 11111 record found\");\r",
											"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB1239 : Duplicate Rule Id: 101111, Rule Seq: 11111 record found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"101111\",\r\n            \"ruleSeq\": \"11111\",\r\n            \"contractRuleName\": \"Min Price\",\r\n            \"contractRuleValue\" : \"100\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n                {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"101111\",\r\n            \"ruleSeq\": \"11111\",\r\n            \"contractRuleName\": \"Min Price\",\r\n            \"contractRuleValue\" : \"100\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v4",
										"evSyncContractRuleMaster"
									]
								}
							},
							"response": []
						},
						{
							"name": "EB1239 (ซ้ำในก้อน Req.)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
											"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB1239 : Duplicate Rule Id: 10, Rule Seq: 1 record found\");\r",
											"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB1239 : Duplicate Rule Id: 10, Rule Seq: 1 record found\");\r",
											"    pm.expect(responseJson.errorMessage[2]).to.equal(\"Data set 3 | EB1239 : Duplicate Rule Id: 20, Rule Seq: 1 record found\");\r",
											"    pm.expect(responseJson.errorMessage[3]).to.equal(\"Data set 4 | EB1239 : Duplicate Rule Id: 20, Rule Seq: 1 record found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"10\",\r\n            \"ruleSeq\": \"1\",\r\n            \"contractRuleName\": \"Min Price\",\r\n            \"contractRuleValue\": \"100\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n        {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"10\",\r\n            \"ruleSeq\": \"1\",\r\n            \"contractRuleName\": \"Min Price\",\r\n            \"contractRuleValue\": \"100\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n        {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"20\",\r\n            \"ruleSeq\": \"1\",\r\n            \"contractRuleName\": \"Min Price\",\r\n            \"contractRuleValue\": \"100\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n        {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"20\",\r\n            \"ruleSeq\": \"1\",\r\n            \"contractRuleName\": \"Min Price\",\r\n            \"contractRuleValue\": \"100\",\r\n            \"createBy\": \"SIRIPS49\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v4",
										"evSyncContractRuleMaster"
									]
								}
							},
							"response": []
						},
						{
							"name": "EB1239 (ซ้ำในก้อน Req.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
											"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 2 | EB1239 : Duplicate Rule Id: 10, Rule Seq: 1 record found\");\r",
											"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 4 | EB1239 : Duplicate Rule Id: 10, Rule Seq: 1 record found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"TM{{$timestamp}}\",\r\n            \"ruleSeq\": \"{{$randomBankAccount}}\",\r\n            \"contractRuleName\": \"Min Price\",\r\n            \"contractRuleValue\": \"100\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n        {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"10\",\r\n            \"ruleSeq\": \"1\",\r\n            \"contractRuleName\": \"Min Price\",\r\n            \"contractRuleValue\": \"100\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n        {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"20\",\r\n            \"ruleSeq\": \"1\",\r\n            \"contractRuleName\": \"Min Price\",\r\n            \"contractRuleValue\": \"100\",\r\n            \"createBy\": \"SIRIPS49\"\r\n        },\r\n        {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"10\",\r\n            \"ruleSeq\": \"1\",\r\n            \"contractRuleName\": \"Min Price\",\r\n            \"contractRuleValue\": \"100\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v4",
										"evSyncContractRuleMaster"
									]
								}
							},
							"response": []
						},
						{
							"name": "EB1239 Dup in DB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
											"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB1239 : Duplicate Rule Id: \"+pm.globals.get('Dup_ruleId')+\", Rule Seq: \"+pm.globals.get('Dup_ruleSeq')+\" record found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var reqBody = {\r",
											"    \"sourceSystem\": pm.environment.get(\"sourceSystem\"),\r",
											"    \"ruleList\": [\r",
											"        {\r",
											"            \"action\": \"Add\",\r",
											"            \"ruleId\": pm.variables.replaceIn('ID'+'{{$timestamp}}'),\r",
											"            \"ruleSeq\": pm.variables.replaceIn('{{$randomBankAccount}}'),\r",
											"            \"contractRuleName\": \"in_package\", \r",
											"            \"contractRuleValue\": \"Device_Android Watch\",\r",
											"            \"createBy\": pm.environment.get(\"createBy\")\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"console.log(reqBody)\r",
											"pm.globals.set(\"Dup_ruleId\", reqBody.ruleList[0].ruleId);\r",
											"pm.globals.set(\"Dup_ruleSeq\", reqBody.ruleList[0].ruleSeq);\r",
											"\r",
											"const postRequest = {\r",
											"  url: pm.environment.get(\"url\")+pm.environment.get(\"_evSyncContractRuleMaster\"),\r",
											"  method: 'POST',\r",
											"  header: {\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw: JSON.stringify(reqBody)\r",
											"  }\r",
											"};\r",
											"pm.sendRequest(postRequest, (error, response) => {\r",
											"  console.log(error ? error : response.json());\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"{{Dup_ruleId}}\",\r\n            \"ruleSeq\": \"{{Dup_ruleSeq}}\",\r\n            \"contractRuleName\": \"Min Price\",\r\n            \"contractRuleValue\" : \"100\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n                {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"{{Dup_ruleId}}\",\r\n            \"ruleSeq\": \"{{Dup_ruleSeq}}\",\r\n            \"contractRuleName\": \"Min Price\",\r\n            \"contractRuleValue\" : \"100\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v4",
										"evSyncContractRuleMaster"
									]
								}
							},
							"response": []
						},
						{
							"name": "EB1239 Dup in DB 2 ก้อน",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
											"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB1239 : Duplicate Rule Id: \"+pm.globals.get('Add_ruleId')+\", Rule Seq: \"+pm.globals.get('Add_ruleSeq_0')+\" record found\");\r",
											"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB1239 : Duplicate Rule Id: \"+pm.globals.get('Add_ruleId')+\", Rule Seq: \"+pm.globals.get('Add_ruleSeq_1')+\" record found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var reqBody = {\r",
											"    \"sourceSystem\": pm.environment.get(\"sourceSystem\"),\r",
											"    \"ruleList\": [\r",
											"        {\r",
											"            \"action\": \"Add\",\r",
											"            \"ruleId\": pm.variables.replaceIn('ID'+'{{$timestamp}}'),\r",
											"            \"ruleSeq\": pm.variables.replaceIn('{{$randomBankAccount}}'),\r",
											"            \"contractRuleName\": \"in_package\", \r",
											"            \"contractRuleValue\": \"Device_Android Watch\",\r",
											"            \"createBy\": pm.environment.get(\"createBy\")\r",
											"        },\r",
											"                {\r",
											"            \"action\": \"Add\",\r",
											"            \"ruleId\": pm.variables.replaceIn('ID'+'{{$timestamp}}'),\r",
											"            \"ruleSeq\": pm.variables.replaceIn('{{$randomBankAccount}}'),\r",
											"            \"contractRuleName\": \"First Package\", \r",
											"            \"createBy\": pm.environment.get(\"createBy\")\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Create dynamic variable\", function () {\r",
											"     for(var i = 0;i < reqBody.ruleList.length ;i++){\r",
											"      pm.globals.set(\"Add_ruleId\", reqBody.ruleList[0].ruleId);\r",
											"      pm.globals.set(\"Add_ruleSeq_\"+[i], reqBody.ruleList[i].ruleSeq);\r",
											"    }\r",
											"});\r",
											"\r",
											"const postRequest = {\r",
											"  url: pm.environment.get(\"url\")+pm.environment.get(\"_evSyncContractRuleMaster\"),\r",
											"  method: 'POST',\r",
											"  header: {\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw: JSON.stringify(reqBody)\r",
											"  }\r",
											"};\r",
											"pm.sendRequest(postRequest, (error, response) => {\r",
											"  console.log(error ? error : response.json());\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"{{Add_ruleId}}\",\r\n            \"ruleSeq\": \"{{Add_ruleSeq_0}}\",\r\n            \"contractRuleName\": \"Min Price\",\r\n            \"contractRuleValue\" : \"100\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n                {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"{{Add_ruleId}}\",\r\n            \"ruleSeq\": \"{{Add_ruleSeq_1}}\",\r\n            \"contractRuleName\": \"Min Price\",\r\n            \"contractRuleValue\" : \"100\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v4",
										"evSyncContractRuleMaster"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Not Found",
					"item": [
						{
							"name": "action : Add",
							"item": [
								{
									"name": "EB0814 (action not found)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0814 : update not found.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"update\",\r\n            \"ruleId\": \"3099\",\r\n            \"ruleSeq\": \"1\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0390 (createBy not found)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0390 : Data Not Found: User name: KACHAIN123\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"3099\",\r\n            \"ruleSeq\": \"1\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"KACHAIN123\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0390 (contractRuleName not found)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0390 : Data Not Found: Contract Rule Name: in_package123\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"3099\",\r\n            \"ruleSeq\": \"1\",\r\n            \"contractRuleName\": \"in_package123\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0390 (contractRuleValue not found)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0390 : Data Not Found: Contract Rule Name: in_package, Contract Rule Value: Device SSSSS\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"3099\",\r\n            \"ruleSeq\": \"1\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device SSSSS\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0390 (contractRuleValue not found)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0390 : Data Not Found: Contract Rule Name: lock_order, Contract Rule Value: SSSSS\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Add\",\r\n            \"ruleId\": \"3099\",\r\n            \"ruleSeq\": \"1\",\r\n            \"contractRuleName\": \"lock_order\",\r\n            \"contractRuleValue\": \"SSSSS\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "action : Delete",
							"item": [
								{
									"name": "EB0390 (createBy not found)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0390 : Data Not Found: User name: KACHAIN123\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Delete\",\r\n            \"ruleId\": \"3099\",\r\n            \"ruleSeq\": \"1\",\r\n            \"createBy\": \"KACHAIN123\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0390 (ruleId,ruleSeq not found)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0390 : Data Not Found: Rule Id: 1234567890, Rule Seq: 1234567890\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Delete\",\r\n            \"ruleId\": \"1234567890\",\r\n            \"ruleSeq\": \"1234567890\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0390 (ruleId not found)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0390 : Data Not Found: Rule Id: 1234567890\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\" : \"Delete\",\r\n            \"ruleId\": \"1234567890\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractRuleMaster"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Nagative Multi",
					"item": [
						{
							"name": "Add/Delete (Mandatory)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
											"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Create By, Rule Id, Rule Seq, Contract Rule Name is required field. Please enter a value for the field.\");\r",
											"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB0100 : Create By, Rule Id is required field. Please enter a value for the field.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\": \"Add\"\r\n        },\r\n        {\r\n            \"action\": \"Delete\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v4",
										"evSyncContractRuleMaster"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add/Delete (Rule Seq : must be numeric only)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
											"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0050 : Rule Seq : test Must be numeric only\");\r",
											"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB0050 : Rule Seq : 10.1 Must be numeric only\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"3099\",\r\n            \"ruleSeq\": \"test\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n        {\r\n            \"action\": \"Delete\",\r\n            \"ruleId\": \"3099\",\r\n            \"ruleSeq\": \"10.1\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v4",
										"evSyncContractRuleMaster"
									]
								}
							},
							"response": []
						},
						{
							"name": "EB0100",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
											"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Rule Id is required field. Please enter a value for the field.\");\r",
											"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB0100 : Create By is required field. Please enter a value for the field.\");\r",
											"    pm.expect(responseJson.errorMessage[2]).to.equal(\"Data set 3 | EB0100 : Contract Rule Name is required field. Please enter a value for the field.\");\r",
											"    pm.expect(responseJson.errorMessage[3]).to.equal(\"Data set 4 | EB0100 : Action is required field. Please enter a value for the field.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"ruleSeq\": \"100\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n        {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"3099\",\r\n            \"ruleSeq\": \"100\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\"\r\n        },\r\n        {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"3099\",\r\n            \"ruleSeq\": \"100\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n        {\r\n            \"ruleId\": \"3099\",\r\n            \"ruleSeq\": \"100\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v4",
										"evSyncContractRuleMaster"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add/Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
											"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0524 : Invalid Length - Rule Seq : test123123123123123123123123123123123\");\r",
											"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 1 | EB0050 : Rule Seq : test123123123123123123123123123123123 Must be numeric only\");\r",
											"    pm.expect(responseJson.errorMessage[2]).to.equal(\"Data set 2 | EB0524 : Invalid Length - Rule Seq : test123123123123123123123123123123123\");\r",
											"    pm.expect(responseJson.errorMessage[3]).to.equal(\"Data set 2 | EB0050 : Rule Seq : test123123123123123123123123123123123 Must be numeric only\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"3099\",\r\n            \"ruleSeq\": \"test123123123123123123123123123123123\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n        {\r\n            \"action\": \"Delete\",\r\n            \"ruleId\": \"3099\",\r\n            \"ruleSeq\": \"test123123123123123123123123123123123\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v4",
										"evSyncContractRuleMaster"
									]
								}
							},
							"response": []
						},
						{
							"name": "EB0050,EB0100,EB0814",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
											"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0050 : Rule Seq : T1 Must be numeric only\");\r",
											"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB0100 : Create By is required field. Please enter a value for the field.\");\r",
											"    pm.expect(responseJson.errorMessage[2]).to.equal(\"Data set 3 | EB0814 : Add1 not found.\");\r",
											"    pm.expect(responseJson.errorMessage[3]).to.equal(\"Data set 4 | EB0100 : Action is required field. Please enter a value for the field.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sourceSystem\": \"{{sourceSystem}}\",\r\n    \"ruleList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"100\",\r\n            \"ruleSeq\": \"T1\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n        {\r\n            \"action\": \"Add\",\r\n            \"ruleId\": \"3099\",\r\n            \"ruleSeq\": \"100.0\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\"\r\n        },\r\n        {\r\n            \"action\": \"Add1\",\r\n            \"ruleId\": \"3099\",\r\n            \"ruleSeq\": \"100\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n        {\r\n            \"ruleId\": \"3099\",\r\n            \"contractRuleName\": \"in_package\",\r\n            \"contractRuleValue\": \"Device_Android Watch\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v4/evSyncContractRuleMaster",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v4",
										"evSyncContractRuleMaster"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Penalty Master",
			"item": [
				{
					"name": "Mandatory",
					"item": [
						{
							"name": "Mandatory Add (specific)",
							"item": [
								{
									"name": "EB0100 penaltyGroupId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : penaltyGroupId is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyId\": \"1\",\r\n            \"penaltySeq\": \"1\",\r\n            \"penaltyFee\": \"100.0\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 penaltyGroupId (Dataset 2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : penaltyGroupId is required field. Please enter a value for the field.\");\r",
													"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB0100 : penaltyGroupId is required field. Please enter a value for the field.\");\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyId\": \"1\",\r\n            \"penaltySeq\": \"1\",\r\n            \"penaltyFee\": \"100.0\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyId\": \"1\",\r\n            \"penaltySeq\": \"1\",\r\n            \"penaltyFee\": \"100.0\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 penaltyId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : penaltyId is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"1\",\r\n            \"penaltySeq\": \"1\",\r\n            \"penaltyFee\": \"100.0\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 penaltyId (Dataset 2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : penaltyId is required field. Please enter a value for the field.\");\r",
													"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB0100 : penaltyId is required field. Please enter a value for the field.\");\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"1\",\r\n            \"penaltySeq\": \"1\",\r\n            \"penaltyFee\": \"100.0\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"1\",\r\n            \"penaltySeq\": \"1\",\r\n            \"penaltyFee\": \"100.0\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}F\"\r\n}"
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 penaltySeq",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : penaltySeq is required field. Please enter a value for the field.\");\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"1\",\r\n            \"penaltyId\": \"1\",\r\n            \"penaltyFee\": \"100.0\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 penaltySeq (Dataset 2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : penaltySeq is required field. Please enter a value for the field.\");\r",
													"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB0100 : penaltySeq is required field. Please enter a value for the field.\");\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"1\",\r\n            \"penaltyId\": \"1\",\r\n            \"penaltyFee\": \"100.0\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"1\",\r\n            \"penaltyId\": \"1\",\r\n            \"penaltyFee\": \"100.0\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 penaltyFee",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : penaltyFee is required field. Please enter a value for the field.\");\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"1\",\r\n            \"penaltyId\": \"1\",\r\n            \"penaltySeq\": \"1\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 penaltyFee (Dataset 2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : penaltyFee is required field. Please enter a value for the field.\");\r",
													"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB0100 : penaltyFee is required field. Please enter a value for the field.\");\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"1\",\r\n            \"penaltyId\": \"1\",\r\n            \"penaltySeq\": \"1\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"1\",\r\n            \"penaltyId\": \"1\",\r\n            \"penaltySeq\": \"1\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 createBy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : createBy is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"1\",\r\n            \"penaltyId\": \"1\",\r\n            \"penaltySeq\": \"1\",\r\n            \"penaltyFee\": \"100.0\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 createBy (Dataset 2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : createBy is required field. Please enter a value for the field.\");\r",
													"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB0100 : createBy is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"penaltyList\" :[{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyType\":\"specific\",\r\n                        \"penaltyGroupId\":\"1\",\r\n                        \"penaltyId\":\"1\",\r\n                        \"penaltySeq\":\"1\",\r\n                        \"penaltyFee\":\"100.0\",\r\n                        \"monthStart\":\"6\",\r\n                        \"monthEnd\":\"12\"\r\n                },{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyType\":\"specific\",\r\n                        \"penaltyGroupId\":\"1\",\r\n                        \"penaltyId\":\"1\",\r\n                        \"penaltySeq\":\"1\",\r\n                        \"penaltyFee\":\"100.0\",\r\n                        \"monthStart\":\"6\",\r\n                        \"monthEnd\":\"12\"                    \r\n                }],                        \r\n     \"sourceSystem\":\"{{sourceSystem}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 penaltyType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : penaltyType is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"penaltyList\" :[{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyGroupId\":\"1\",\r\n                        \"penaltyId\":\"1\",\r\n                        \"penaltySeq\":\"1\",\r\n                        \"penaltyFee\":\"100.0\",\r\n                        \"monthStart\":\"6\",\r\n                        \"monthEnd\":\"12\",\r\n                        \"createBy\":\"{{createBy}}\"\r\n                }],                        \r\n     \"sourceSystem\":\"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 penaltyType (Dataset 2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : penaltyType is required field. Please enter a value for the field.\");\r",
													"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB0100 : penaltyType is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"penaltyList\" :[{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyGroupId\":\"1\",\r\n                        \"penaltyId\":\"1\",\r\n                        \"penaltySeq\":\"1\",\r\n                        \"penaltyFee\":\"100.0\",\r\n                        \"monthStart\":\"6\",\r\n                        \"monthEnd\":\"12\",\r\n                        \"createBy\":\"{{createBy}}\"\r\n                },{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyGroupId\":\"1\",\r\n                        \"penaltyId\":\"1\",\r\n                        \"penaltySeq\":\"1\",\r\n                        \"penaltyFee\":\"100.0\",\r\n                        \"monthStart\":\"6\",\r\n                        \"monthEnd\":\"12\",\r\n                        \"createBy\":\"{{createBy}}\"                    \r\n                }],                        \r\n     \"sourceSystem\":\"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Mandatory Add (prorate)",
							"item": [
								{
									"name": "EB0100 penaltyGroupId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : penaltyGroupId is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"prorate\",\r\n            \"penaltyId\": \"1\",\r\n            \"penaltySeq\": \"1\",\r\n            \"penaltyFee\": \"100.0\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 penaltyGroupId (Dataset 2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : penaltyGroupId is required field. Please enter a value for the field.\");\r",
													"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB0100 : penaltyGroupId is required field. Please enter a value for the field.\");\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"penaltyList\" :[{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyType\":\"prorate\",\r\n                        \"penaltyId\":\"1\",\r\n                        \"penaltySeq\":\"1\",\r\n                        \"penaltyFee\":\"100.0\",\r\n                        \"monthStart\":\"6\",\r\n                        \"monthEnd\":\"12\",\r\n                        \"createBy\":\"{{createBy}}\"\r\n                },{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyType\":\"prorate\",\r\n                        \"penaltyId\":\"1\",\r\n                        \"penaltySeq\":\"1\",\r\n                        \"penaltyFee\":\"100.0\",\r\n                        \"monthStart\":\"6\",\r\n                        \"monthEnd\":\"12\",\r\n                        \"createBy\":\"{{createBy}}\"\r\n                }],                        \r\n     \"sourceSystem\":\"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 penaltyId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : penaltyId is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"penaltyList\" :[{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyType\":\"prorate\",\r\n                        \"penaltyGroupId\":\"1\",\r\n                        \"penaltySeq\":\"1\",\r\n                        \"penaltyFee\":\"100.0\",\r\n                        \"monthStart\":\"6\",\r\n                        \"monthEnd\":\"12\",\r\n                        \"createBy\":\"{{createBy}}\"\r\n                }],                        \r\n     \"sourceSystem\":\"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 penaltyId (Dataset 2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : penaltyId is required field. Please enter a value for the field.\");\r",
													"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB0100 : penaltyId is required field. Please enter a value for the field.\");\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"penaltyList\" :[{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyType\":\"prorate\",\r\n                        \"penaltyGroupId\":\"1\",\r\n                        \"penaltySeq\":\"1\",\r\n                        \"penaltyFee\":\"100.0\",\r\n                        \"monthStart\":\"6\",\r\n                        \"monthEnd\":\"12\",\r\n                        \"createBy\":\"{{createBy}}\"\r\n                },{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyType\":\"prorate\",\r\n                        \"penaltyGroupId\":\"1\",\r\n                        \"penaltySeq\":\"1\",\r\n                        \"penaltyFee\":\"100.0\",\r\n                        \"monthStart\":\"6\",\r\n                        \"monthEnd\":\"12\",\r\n                        \"createBy\":\"{{createBy}}\"\r\n                }],                        \r\n     \"sourceSystem\":\"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 penaltySeq",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : penaltySeq is required field. Please enter a value for the field.\");\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"penaltyList\" :[{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyType\":\"prorate\",\r\n                        \"penaltyGroupId\":\"1\",\r\n                        \"penaltyId\":\"1\",\r\n                        \"penaltyFee\":\"100.0\",\r\n                        \"monthStart\":\"6\",\r\n                        \"monthEnd\":\"12\",\r\n                        \"createBy\":\"{{createBy}}\"\r\n                }],                        \r\n     \"sourceSystem\":\"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 penaltySeq (Dataset 2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : penaltySeq is required field. Please enter a value for the field.\");\r",
													"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB0100 : penaltySeq is required field. Please enter a value for the field.\");\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"prorate\",\r\n            \"penaltyGroupId\": \"1\",\r\n            \"penaltyId\": \"1\",\r\n            \"penaltyFee\": \"100.0\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"prorate\",\r\n            \"penaltyGroupId\": \"1\",\r\n            \"penaltyId\": \"1\",\r\n            \"penaltyFee\": \"100.0\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 penaltyFee",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : penaltyFee is required field. Please enter a value for the field.\");\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"penaltyList\" :[{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyType\":\"prorate\",\r\n                        \"penaltyGroupId\":\"1\",\r\n                        \"penaltyId\":\"1\",\r\n                        \"penaltySeq\":\"1\",\r\n                        \"monthStart\":\"6\",\r\n                        \"monthEnd\":\"12\",\r\n                        \"createBy\":\"{{createBy}}\"\r\n                }],                        \r\n     \"sourceSystem\":\"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 penaltyFee (Dataset 2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : penaltyFee is required field. Please enter a value for the field.\");\r",
													"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB0100 : penaltyFee is required field. Please enter a value for the field.\");\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"penaltyList\" :[{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyType\":\"prorate\",\r\n                        \"penaltyGroupId\":\"1\",\r\n                        \"penaltyId\":\"1\",\r\n                        \"penaltySeq\":\"1\",\r\n                        \"monthStart\":\"6\",\r\n                        \"monthEnd\":\"12\",\r\n                        \"createBy\":\"{{createBy}}\"\r\n                },{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyType\":\"prorate\",\r\n                        \"penaltyGroupId\":\"1\",\r\n                        \"penaltyId\":\"1\",\r\n                        \"penaltySeq\":\"1\",\r\n                        \"monthStart\":\"6\",\r\n                        \"monthEnd\":\"12\",\r\n                        \"createBy\":\"{{createBy}}\"\r\n                }],                        \r\n     \"sourceSystem\":\"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 monthStart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : monthStart is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"penaltyList\" :[{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyType\":\"prorate\",\r\n                        \"penaltyGroupId\":\"1\",\r\n                        \"penaltyId\":\"1\",\r\n                        \"penaltySeq\":\"1\",\r\n                        \"penaltyFee\":\"100.00\",\r\n                        \"monthEnd\":\"12\",\r\n                        \"createBy\":\"{{createBy}}\"\r\n                }],                        \r\n     \"sourceSystem\":\"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractPenaltyMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 monthStart (Dataset 2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : monthStart is required field. Please enter a value for the field.\");\r",
													"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB0100 : monthStart is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"penaltyList\" :[{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyType\":\"prorate\",\r\n                        \"penaltyGroupId\":\"1\",\r\n                        \"penaltyId\":\"1\",\r\n                        \"penaltySeq\":\"1\",\r\n                        \"penaltyFee\":\"100.00\",\r\n                        \"monthEnd\":\"12\",\r\n                        \"createBy\":\"{{createBy}}\"\r\n                },{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyType\":\"prorate\",\r\n                        \"penaltyGroupId\":\"1\",\r\n                        \"penaltyId\":\"1\",\r\n                        \"penaltySeq\":\"1\",\r\n                        \"penaltyFee\":\"100.00\",\r\n                        \"monthEnd\":\"12\",\r\n                        \"createBy\":\"{{createBy}}\"\r\n                }],                        \r\n     \"sourceSystem\":\"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 monthEnd",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : monthEnd is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"penaltyList\" :[{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyType\":\"prorate\",\r\n                        \"penaltyGroupId\":\"1\",\r\n                        \"penaltyId\":\"1\",\r\n                        \"penaltySeq\":\"1\",\r\n                        \"penaltyFee\":\"100.00\",\r\n                        \"monthStart\":\"6\",\r\n                        \"createBy\":\"{{createBy}}\"\r\n                }],                        \r\n     \"sourceSystem\":\"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 monthEnd (Dataset 2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : monthEnd is required field. Please enter a value for the field.\");\r",
													"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB0100 : monthEnd is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"penaltyList\" :[{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyType\":\"prorate\",\r\n                        \"penaltyGroupId\":\"1\",\r\n                        \"penaltyId\":\"1\",\r\n                        \"penaltySeq\":\"1\",\r\n                        \"penaltyFee\":\"100.00\",\r\n                        \"monthStart\":\"6\",\r\n                        \"createBy\":\"{{createBy}}\"\r\n                },{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyType\":\"prorate\",\r\n                        \"penaltyGroupId\":\"1\",\r\n                        \"penaltyId\":\"1\",\r\n                        \"penaltySeq\":\"1\",\r\n                        \"penaltyFee\":\"100.00\",\r\n                        \"monthStart\":\"6\",\r\n                        \"createBy\":\"{{createBy}}\"\r\n                }],                        \r\n     \"sourceSystem\":\"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 createBy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : createBy is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"penaltyList\" :[{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyType\":\"prorate\",\r\n                        \"penaltyGroupId\":\"1\",\r\n                        \"penaltyId\":\"1\",\r\n                        \"penaltySeq\":\"1\",\r\n                        \"penaltyFee\":\"100.00\",\r\n                        \"monthStart\":\"6\",\r\n                        \"monthEnd\":\"12\"\r\n                }],                        \r\n     \"sourceSystem\":\"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 createBy (Dataset 2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : createBy is required field. Please enter a value for the field.\");\r",
													"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB0100 : createBy is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"penaltyList\" :[{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyType\":\"prorate\",\r\n                        \"penaltyGroupId\":\"1\",\r\n                        \"penaltyId\":\"1\",\r\n                        \"penaltySeq\":\"1\",\r\n                        \"penaltyFee\":\"100.00\",\r\n                        \"monthStart\":\"6\",\r\n                        \"monthEnd\":\"12\"\r\n                },{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyType\":\"prorate\",\r\n                        \"penaltyGroupId\":\"1\",\r\n                        \"penaltyId\":\"1\",\r\n                        \"penaltySeq\":\"1\",\r\n                        \"penaltyFee\":\"100.00\",\r\n                        \"monthStart\":\"6\",\r\n                        \"monthEnd\":\"12\"\r\n                }],                        \r\n     \"sourceSystem\":\"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 penaltyType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : penaltyType is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"penaltyList\" :[{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyGroupId\":\"1\",\r\n                        \"penaltyId\":\"1\",\r\n                        \"penaltySeq\":\"1\",\r\n                        \"penaltyFee\":\"100.00\",\r\n                        \"monthStart\":\"6\",\r\n                        \"monthEnd\":\"12\",\r\n                        \"createBy\":\"{{createBy}}\"\r\n                }],                        \r\n     \"sourceSystem\":\"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 penaltyType (Dataset 2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : penaltyType is required field. Please enter a value for the field.\");\r",
													"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB0100 : penaltyType is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"penaltyList\" :[{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyGroupId\":\"1\",\r\n                        \"penaltyId\":\"1\",\r\n                        \"penaltySeq\":\"1\",\r\n                        \"penaltyFee\":\"100.00\",\r\n                        \"monthStart\":\"6\",\r\n                        \"monthEnd\":\"12\",\r\n                        \"createBy\":\"{{createBy}}\"\r\n                },{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyGroupId\":\"1\",\r\n                        \"penaltyId\":\"1\",\r\n                        \"penaltySeq\":\"1\",\r\n                        \"penaltyFee\":\"100.00\",\r\n                        \"monthStart\":\"6\",\r\n                        \"monthEnd\":\"12\",\r\n                        \"createBy\":\"{{createBy}}\"\r\n                }],                        \r\n     \"sourceSystem\":\"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Mandatory Delete",
							"item": [
								{
									"name": "EB0100 penaltyGroupId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : penaltyGroupId is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"penaltyList\" :[{\r\n                        \"action\":\"Delete\",\r\n                        \"penaltyType\":\"specific\",\r\n                        \"penaltyId\":\"1\",\r\n                        \"penaltySeq\":\"1\",\r\n                        \"penaltyFee\":\"100.0\",\r\n                        \"monthStart\":\"6\",\r\n                        \"monthEnd\":\"12\",\r\n                        \"createBy\":\"{{createBy}}\"\r\n                }],                        \r\n     \"sourceSystem\":\"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 createBy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : createBy is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"penaltyList\" :[{\r\n                        \"action\":\"Delete\",\r\n                        \"penaltyType\":\"specific\",\r\n                        \"penaltyGroupId\":\"1\",\r\n                        \"penaltyId\":\"1\",\r\n                        \"penaltySeq\":\"1\",\r\n                        \"penaltyFee\":\"100.0\",\r\n                        \"monthStart\":\"6\",\r\n                        \"monthEnd\":\"12\"\r\n                }],                        \r\n     \"sourceSystem\":\"{{sourceSystem}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0100 All Delete in case Duplicate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : penaltyGroupId, createBy is required field. Please enter a value for the field.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Delete\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyId\": \"1\",\r\n            \"penaltySeq\": \"1\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "EB0100 All Mandatory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
											"    pm.expect(responseJson.errorMessage[0]).to.equal(\"EB0100 : sourceSystem is required field. Please enter a value for the field.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"penaltyList\" :[{\r\n                        \"action\":\"Add\"\r\n                }]                       \r\n}"
								},
								"url": {
									"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
									"protocol": "http",
									"host": [
										"10",
										"138",
										"34",
										"239"
									],
									"port": "3300",
									"path": [
										"api",
										"v4",
										"evSyncContractPenaltyMaster"
									]
								}
							},
							"response": []
						},
						{
							"name": "EB0100 All Mandatory (Dataset 2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
											"    pm.expect(responseJson.errorMessage[0]).to.equal(\"EB0100 : sourceSystem is required field. Please enter a value for the field.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"penaltyList\" :[{\r\n                        \"action\":\"Add\"\r\n                },{\r\n                        \"action\":\"Add\"\r\n                }]                       \r\n}"
								},
								"url": {
									"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
									"protocol": "http",
									"host": [
										"10",
										"138",
										"34",
										"239"
									],
									"port": "3300",
									"path": [
										"api",
										"v4",
										"evSyncContractPenaltyMaster"
									]
								}
							},
							"response": []
						},
						{
							"name": "EB0100 All Add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
											"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : penaltyType, penaltyGroupId, penaltyId, penaltySeq, penaltyFee, monthStart, monthEnd, createBy is required field. Please enter a value for the field.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"penaltyList\" :[{\r\n                        \"action\":\"Add\"   \r\n                }],\r\n        \"sourceSystem\":\"{{sourceSystem}}\"                    \r\n}"
								},
								"url": {
									"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
									"protocol": "http",
									"host": [
										"10",
										"138",
										"34",
										"239"
									],
									"port": "3300",
									"path": [
										"api",
										"v4",
										"evSyncContractPenaltyMaster"
									]
								}
							},
							"response": []
						},
						{
							"name": "EB0100 All Add (Dataset 2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
											"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : penaltyType, penaltyGroupId, penaltyId, penaltySeq, penaltyFee, monthStart, monthEnd, createBy is required field. Please enter a value for the field.\");\r",
											"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB0100 : penaltyType, penaltyGroupId, penaltyId, penaltySeq, penaltyFee, monthStart, monthEnd, createBy is required field. Please enter a value for the field.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\"\r\n        },\r\n        {\r\n            \"action\": \"Add\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}"
								},
								"url": {
									"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
									"protocol": "http",
									"host": [
										"10",
										"138",
										"34",
										"239"
									],
									"port": "3300",
									"path": [
										"api",
										"v4",
										"evSyncContractPenaltyMaster"
									]
								}
							},
							"response": []
						},
						{
							"name": "EB0100 All Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
											"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : penaltyGroupId, createBy is required field. Please enter a value for the field.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Delete\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyId\": \"1\",\r\n            \"penaltySeq\": \"1\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}"
								},
								"url": {
									"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
									"protocol": "http",
									"host": [
										"10",
										"138",
										"34",
										"239"
									],
									"port": "3300",
									"path": [
										"api",
										"v4",
										"evSyncContractPenaltyMaster"
									]
								}
							},
							"response": []
						},
						{
							"name": "EB0100 All Delete (Dataset 2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
											"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : penaltyGroupId, createBy is required field. Please enter a value for the field.\");\r",
											"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB0100 : penaltyGroupId, createBy is required field. Please enter a value for the field.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"penaltyList\" :[{\r\n                        \"action\":\"Delete\"\r\n                      \r\n                },{\r\n                        \"action\":\"Delete\"                    \r\n                }],\r\n        \"sourceSystem\":\"{{sourceSystem}}\"                    \r\n}"
								},
								"url": {
									"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
									"protocol": "http",
									"host": [
										"10",
										"138",
										"34",
										"239"
									],
									"port": "3300",
									"path": [
										"api",
										"v4",
										"evSyncContractPenaltyMaster"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Empty/Null",
					"item": [
						{
							"name": "EB0100 PenaltyList Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"errorMessage\": {\r",
											"            \"type\": \"array\",\r",
											"            \"items\": [\r",
											"                {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            ]\r",
											"        }\r",
											"    },\r",
											"    \"required\": [\r",
											"        \"status\",\r",
											"        \"errorMessage\"\r",
											"    ],\r",
											"    \"additionalProperties\": false\r",
											"}\r",
											"\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
											"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Please specify data.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n     \"penaltyList\" :[],                  \r\n     \"sourceSystem\":\"{{sourceSystem}}\"\r\n}"
								},
								"url": {
									"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
									"protocol": "http",
									"host": [
										"10",
										"138",
										"34",
										"239"
									],
									"port": "3300",
									"path": [
										"api",
										"v4",
										"evSyncContractPenaltyMaster"
									]
								}
							},
							"response": []
						},
						{
							"name": "EB0100 PenaltyList Null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"errorMessage\": {\r",
											"            \"type\": \"array\",\r",
											"            \"items\": [\r",
											"                {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            ]\r",
											"        }\r",
											"    },\r",
											"    \"required\": [\r",
											"        \"status\",\r",
											"        \"errorMessage\"\r",
											"    ],\r",
											"    \"additionalProperties\": false\r",
											"}\r",
											"\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
											"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Please specify data.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n     \"penaltyList\" :[null] ,                  \r\n     \"sourceSystem\":\"{{sourceSystem}}\"\r\n}"
								},
								"url": {
									"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
									"protocol": "http",
									"host": [
										"10",
										"138",
										"34",
										"239"
									],
									"port": "3300",
									"path": [
										"api",
										"v4",
										"evSyncContractPenaltyMaster"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Not Found",
					"item": [
						{
							"name": "EB0814 Action Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
											"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0814 : Action update not found.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"penaltyList\" :[{\r\n                        \"action\":\"update\",\r\n                        \"penaltyType\":\"specific\",\r\n                        \"penaltyGroupId\":\"1\",\r\n                        \"penaltyId\":\"1\",\r\n                        \"penaltySeq\":\"1\",\r\n                        \"penaltyFee\":\"100.00\",\r\n                        \"monthStart\":\"6\",\r\n                        \"monthEnd\":\"12\",\r\n                        \"createBy\":\"abc\"\r\n                 }],                        \r\n     \"sourceSystem\":\"{{sourceSystem}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
									"protocol": "http",
									"host": [
										"10",
										"138",
										"34",
										"239"
									],
									"port": "3300",
									"path": [
										"api",
										"v4",
										"evSyncContractPenaltyMaster"
									]
								}
							},
							"response": []
						},
						{
							"name": "EB0814 CreateBy Not Found บัค",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
											"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0814 : createdBy: abc not found.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"PN{{$timestamp}}\",\r\n            \"penaltyId\": \"{{$randomBankAccount}}\",\r\n            \"penaltySeq\": \"{{$randomInt}}\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"abc\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}"
								},
								"url": {
									"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
									"protocol": "http",
									"host": [
										"10",
										"138",
										"34",
										"239"
									],
									"port": "3300",
									"path": [
										"api",
										"v4",
										"evSyncContractPenaltyMaster"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Required Field",
					"item": [
						{
							"name": "EB0100 Action",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
											"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0100 : Action is required field. Please enter a value for the field.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"1\",\r\n            \"penaltyId\": \"1\",\r\n            \"penaltySeq\": \"1\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}"
								},
								"url": {
									"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
									"protocol": "http",
									"host": [
										"10",
										"138",
										"34",
										"239"
									],
									"port": "3300",
									"path": [
										"api",
										"v4",
										"evSyncContractPenaltyMaster"
									]
								}
							},
							"response": []
						},
						{
							"name": "EB0100 Not SourceSystem",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
											"    pm.expect(responseJson.errorMessage[0]).to.equal(\"EB0100 : sourceSystem is required field. Please enter a value for the field.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"1\",\r\n            \"penaltyId\": \"1\",\r\n            \"penaltySeq\": \"1\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"abc\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
									"protocol": "http",
									"host": [
										"10",
										"138",
										"34",
										"239"
									],
									"port": "3300",
									"path": [
										"api",
										"v4",
										"evSyncContractPenaltyMaster"
									]
								}
							},
							"response": []
						},
						{
							"name": "EB0100 SourceSystem",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
											"    pm.expect(responseJson.errorMessage[0]).to.equal(\"EB0100 : sourceSystem is required field. Please enter a value for the field.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"add\",\r\n            \"penaltyType\": \"prorate\",\r\n            \"penaltyGroupId\": \"R14252222\",\r\n            \"penaltyId\": \"3\",\r\n            \"penaltySeq\": \"1\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"0\",\r\n            \"monthEnd\": \"4\",\r\n            \"createBy\": \"SUNTAREA\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
									"protocol": "http",
									"host": [
										"10",
										"138",
										"34",
										"239"
									],
									"port": "3300",
									"path": [
										"api",
										"v4",
										"evSyncContractPenaltyMaster"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Parameter is Not Number",
					"item": [
						{
							"name": "Add",
							"item": [
								{
									"name": "All Parameter is Not Number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0050 : penaltySeq, penaltyFee Must be numeric only\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"1\",\r\n            \"penaltyId\": \"1\",\r\n            \"penaltySeq\": \"w\",\r\n            \"penaltyFee\": \"w\",\r\n            \"monthStart\": \"w\",\r\n            \"monthEnd\": \"w\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "penaltyFee is Not Number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0050 : penaltyFee Must be numeric only\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"1244\",\r\n            \"penaltyId\": \"1\",\r\n            \"penaltySeq\": \"4\",\r\n            \"penaltyFee\": \"w\",\r\n            \"monthStart\": \"1\",\r\n            \"monthEnd\": \"3\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "monthStart is Not Number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0050 : monthStart Must be numeric only\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"prorate\",\r\n            \"penaltyGroupId\": \"PN{{$timestamp}}\",\r\n            \"penaltyId\": \"{{$randomBankAccount}}\",\r\n            \"penaltySeq\": \"{{$randomInt}}\",\r\n            \"penaltyFee\": \"3\",\r\n            \"monthStart\": \"w\",\r\n            \"monthEnd\": \"3\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "monthEnd  is Not Number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0050 : monthEnd Must be numeric only\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"prorate\",\r\n            \"penaltyGroupId\": \"PN{{$timestamp}}\",\r\n            \"penaltyId\": \"{{$randomBankAccount}}\",\r\n            \"penaltySeq\": \"{{$randomInt}}\",\r\n            \"penaltyFee\": \"3\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"e\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "penaltySeq  is Not Number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0050 : penaltySeq Must be numeric only\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"1\",\r\n            \"penaltyId\": \"1\",\r\n            \"penaltySeq\": \"s\",\r\n            \"penaltyFee\": \"3\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"e\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete",
							"item": [
								{
									"name": "penaltySeq is Not Number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0050 : penaltySeq Must be numeric only\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Delete\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"1\",\r\n            \"penaltyId\": \"1\",\r\n            \"penaltySeq\": \"ก\",\r\n            \"penaltyFee\": \"3\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"e\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Validate Length",
					"item": [
						{
							"name": "Validate Decimal Length > 2",
							"item": [
								{
									"name": "penaltyFee Decimal Length > 2",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"1\",\r\n            \"penaltyId\": \"14\",\r\n            \"penaltySeq\": \"1\",\r\n            \"penaltyFee\": \"100.004\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Add",
							"item": [
								{
									"name": "Data Set = 1",
									"item": [
										{
											"name": "All Parameter Length > 30",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test('Schema is valid', function() {\r",
															"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
															"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Check response is Correct\", function () {\r",
															"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
															"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0524 : Invalid Length - Penalty Type: penaltyId, penaltyGroupId, penaltySeq\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"1000000000000000000000000000000\",\r\n            \"penaltyId\": \"100000000000000000000000000000000000\",\r\n            \"penaltySeq\": \"100000000000000000000000000000000000\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
													"protocol": "http",
													"host": [
														"10",
														"138",
														"34",
														"239"
													],
													"port": "3300",
													"path": [
														"api",
														"v4",
														"evSyncContractPenaltyMaster"
													]
												}
											},
											"response": []
										},
										{
											"name": "penaltyGroupId Length > 30",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test('Schema is valid', function() {\r",
															"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
															"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Check response is Correct\", function () {\r",
															"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
															"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0524 : Invalid Length - Penalty Type: penaltyGroupId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"1000000000000000000000000000000000\",\r\n            \"penaltyId\": \"1\",\r\n            \"penaltySeq\": \"1\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
													"protocol": "http",
													"host": [
														"10",
														"138",
														"34",
														"239"
													],
													"port": "3300",
													"path": [
														"api",
														"v4",
														"evSyncContractPenaltyMaster"
													]
												}
											},
											"response": []
										},
										{
											"name": "penaltyId Length > 30",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test('Schema is valid', function() {\r",
															"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
															"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Check response is Correct\", function () {\r",
															"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
															"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0524 : Invalid Length - Penalty Type: penaltyId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"1\",\r\n            \"penaltyId\": \"10000000000000000000000000000000000\",\r\n            \"penaltySeq\": \"1\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
													"protocol": "http",
													"host": [
														"10",
														"138",
														"34",
														"239"
													],
													"port": "3300",
													"path": [
														"api",
														"v4",
														"evSyncContractPenaltyMaster"
													]
												}
											},
											"response": []
										},
										{
											"name": "penaltySeq Length > 30",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test('Schema is valid', function() {\r",
															"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
															"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Check response is Correct\", function () {\r",
															"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
															"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0524 : Invalid Length - Penalty Type: penaltySeq\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"1\",\r\n            \"penaltyId\": \"1\",\r\n            \"penaltySeq\": \"1000000000000000000000000000000\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
													"protocol": "http",
													"host": [
														"10",
														"138",
														"34",
														"239"
													],
													"port": "3300",
													"path": [
														"api",
														"v4",
														"evSyncContractPenaltyMaster"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Data Set > 1",
									"item": [
										{
											"name": "Length > 30",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test('Schema is valid', function() {\r",
															"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
															"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Check response is Correct\", function () {\r",
															"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
															"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0524 : Invalid Length - Penalty Type: penaltySeq\");\r",
															"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB0524 : Invalid Length - Penalty Type: penaltyId\");\r",
															"    pm.expect(responseJson.errorMessage[2]).to.equal(\"Data set 3 | EB0524 : Invalid Length - Penalty Type: penaltyGroupId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"1\",\r\n            \"penaltyId\": \"1\",\r\n            \"penaltySeq\": \"100000000000000000000000000000000000\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"1\",\r\n            \"penaltyId\": \"100000000000000000000000000000000000\",\r\n            \"penaltySeq\": \"1\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"1000000000000000000000000000000\",\r\n            \"penaltyId\": \"1\",\r\n            \"penaltySeq\": \"1\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
													"protocol": "http",
													"host": [
														"10",
														"138",
														"34",
														"239"
													],
													"port": "3300",
													"path": [
														"api",
														"v4",
														"evSyncContractPenaltyMaster"
													]
												}
											},
											"response": []
										},
										{
											"name": "Length > 30",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test('Schema is valid', function() {\r",
															"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
															"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Check response is Correct\", function () {\r",
															"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
															"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0524 : Invalid Length - Penalty Type: penaltyId, penaltyGroupId, penaltySeq\");\r",
															"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB0524 : Invalid Length - Penalty Type: penaltyId, penaltyGroupId, penaltySeq\");\r",
															"    pm.expect(responseJson.errorMessage[2]).to.equal(\"Data set 3 | EB0524 : Invalid Length - Penalty Type: penaltyId, penaltyGroupId, penaltySeq\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"1333333333333333333333333333333333333333333\",\r\n            \"penaltyId\": \"13333333333333333333333333333333333333333333\",\r\n            \"penaltySeq\": \"100000000000000000000000000000000000\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"13333333333333222222222222222222222222\",\r\n            \"penaltyId\": \"100000000000000000000000000000000000\",\r\n            \"penaltySeq\": \"1333333333333322222222222222222222222222222\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"1000000000000000000000000000000\",\r\n            \"penaltyId\": \"133333333333333333333333333333333333332\",\r\n            \"penaltySeq\": \"12222222222222222222222222222222222333\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
													"protocol": "http",
													"host": [
														"10",
														"138",
														"34",
														"239"
													],
													"port": "3300",
													"path": [
														"api",
														"v4",
														"evSyncContractPenaltyMaster"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Delete",
							"item": [
								{
									"name": "Data Set = 1",
									"item": [
										{
											"name": "penaltyGroupId Length > 30",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test('Schema is valid', function() {\r",
															"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
															"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Check response is Correct\", function () {\r",
															"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
															"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0524 : Invalid Length - penaltyGroupId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Delete\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"1000000000000000000000000000000000\",\r\n            \"penaltyId\": \"1\",\r\n            \"penaltySeq\": \"1\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
													"protocol": "http",
													"host": [
														"10",
														"138",
														"34",
														"239"
													],
													"port": "3300",
													"path": [
														"api",
														"v4",
														"evSyncContractPenaltyMaster"
													]
												}
											},
											"response": []
										},
										{
											"name": "penaltySeq Length > 30",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test('Schema is valid', function() {\r",
															"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
															"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Check response is Correct\", function () {\r",
															"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
															"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0524 : Invalid Length - penaltySeq\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Delete\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"1\",\r\n            \"penaltyId\": \"1\",\r\n            \"penaltySeq\": \"10000000000000000000000888800000000\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
													"protocol": "http",
													"host": [
														"10",
														"138",
														"34",
														"239"
													],
													"port": "3300",
													"path": [
														"api",
														"v4",
														"evSyncContractPenaltyMaster"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Data Set > 1",
									"item": [
										{
											"name": "penaltyGroupId Length > 30",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test('Schema is valid', function() {\r",
															"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
															"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Check response is Correct\", function () {\r",
															"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
															"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0524 : Invalid Length - penaltyGroupId\");\r",
															"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB0524 : Invalid Length - penaltyGroupId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Delete\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"1232222222222222222222222222221\",\r\n            \"penaltyId\": \"1\",\r\n            \"penaltySeq\": \"10\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n        {\r\n            \"action\": \"Delete\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"1222111111111222222222222222222\",\r\n            \"penaltyId\": \"10\",\r\n            \"penaltySeq\": \"1\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
													"protocol": "http",
													"host": [
														"10",
														"138",
														"34",
														"239"
													],
													"port": "3300",
													"path": [
														"api",
														"v4",
														"evSyncContractPenaltyMaster"
													]
												}
											},
											"response": []
										},
										{
											"name": "penaltySeq Length > 30",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test('Schema is valid', function() {\r",
															"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
															"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Check response is Correct\", function () {\r",
															"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
															"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 2 | EB0524 : Invalid Length - penaltySeq\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Delete\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"12\",\r\n            \"penaltyId\": \"1342222222222222222222222222222222222\",\r\n            \"penaltySeq\": \"10\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n        {\r\n            \"action\": \"Delete\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"13\",\r\n            \"penaltyId\": \"10\",\r\n            \"penaltySeq\": \"1222222333333322222222222222222222222\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
													"protocol": "http",
													"host": [
														"10",
														"138",
														"34",
														"239"
													],
													"port": "3300",
													"path": [
														"api",
														"v4",
														"evSyncContractPenaltyMaster"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "penaltyType  Not 'specific' & 'prorate'",
					"item": [
						{
							"name": "penaltyType\" parameter is  Not 'specific' & 'prorate'",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"\r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
											"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0390 : Data Not Found: Penalty Type: test\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"penaltyList\" :[{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyType\":\"test\",\r\n                        \"penaltyGroupId\":\"1\",\r\n                        \"penaltyId\":\"1\",\r\n                        \"penaltySeq\":\"4\",\r\n                        \"penaltyFee\":\"5.0\",\r\n                        \"monthStart\":\"3\",\r\n                        \"monthEnd\":\"10\",\r\n                        \"createBy\":\"{{createBy}}\"\r\n                }        \r\n        ],                        \r\n     \"sourceSystem\":\"{{sourceSystem}}\"\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
									"protocol": "http",
									"host": [
										"10",
										"138",
										"34",
										"239"
									],
									"port": "3300",
									"path": [
										"api",
										"v4",
										"evSyncContractPenaltyMaster"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Duplicate",
					"item": [
						{
							"name": "GroupId Duplicated with penaltyList",
							"item": [
								{
									"name": "Data Set = 2",
									"item": [
										{
											"name": "penaltyType = 'specific'",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test('Schema is valid', function() {\r",
															"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
															"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Check response is Correct\", function () {\r",
															"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
															"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 2 | EB1754 : Penalty type : specific must have only one Penalty fee\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"111335\",\r\n            \"penaltyId\": \"6\",\r\n            \"penaltySeq\": \"1\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"2\",\r\n            \"monthEnd\": \"8\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"111335\",\r\n            \"penaltyId\": \"6\",\r\n            \"penaltySeq\": \"2\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"8\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/v4/evSyncContractPenaltyMaster",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v4",
														"evSyncContractPenaltyMaster"
													]
												}
											},
											"response": []
										},
										{
											"name": "penaltyType = 'specific' & 'prorate'",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test('Schema is valid', function() {\r",
															"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
															"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Check response is Correct\", function () {\r",
															"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
															"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 2 | EB0044 : Penalty Group Id : 3336 is Invalid Penalty Type.\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n        \"penaltyList\" :[{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyType\":\"specific\",\r\n                        \"penaltyGroupId\":\"3336\",\r\n                        \"penaltyId\":\"6\",\r\n                        \"penaltySeq\":\"13\",\r\n                        \"penaltyFee\":\"100.00\",\r\n                        \"monthStart\":\"2\",\r\n                        \"monthEnd\":\"8\",\r\n                        \"createBy\":\"{{createBy}}\"\r\n                },{    \r\n                        \"action\":\"Add\",\r\n                        \"penaltyType\":\"prorate\",\r\n                        \"penaltyGroupId\":\"3336\",\r\n                        \"penaltyId\":\"7\",\r\n                        \"penaltySeq\":\"2\",\r\n                        \"penaltyFee\":\"100.00\",\r\n                        \"monthStart\":\"8\",\r\n                        \"monthEnd\":\"12\",\r\n                        \"createBy\":\"{{createBy}}\"   \r\n        }],                        \r\n     \"sourceSystem\":\"{{sourceSystem}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/v4/evSyncContractPenaltyMaster",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v4",
														"evSyncContractPenaltyMaster"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Data Set > 2",
									"item": [
										{
											"name": "penaltyType = 'specific'",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test('Schema is valid', function() {\r",
															"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
															"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Check response is Correct\", function () {\r",
															"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
															"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 2 | EB1754 : Penalty type : specific must have only one Penalty fee\")\r",
															"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 4 | EB1754 : Penalty type : specific must have only one Penalty fee\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"11133\",\r\n            \"penaltyId\": \"6\",\r\n            \"penaltySeq\": \"1\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"2\",\r\n            \"monthEnd\": \"8\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"11133\",\r\n            \"penaltyId\": \"7\",\r\n            \"penaltySeq\": \"2\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"8\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n                {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"11134\",\r\n            \"penaltyId\": \"8\",\r\n            \"penaltySeq\": \"9\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"2\",\r\n            \"monthEnd\": \"8\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"11134\",\r\n            \"penaltyId\": \"7\",\r\n            \"penaltySeq\": \"2\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"8\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
													"protocol": "http",
													"host": [
														"10",
														"138",
														"34",
														"239"
													],
													"port": "3300",
													"path": [
														"api",
														"v4",
														"evSyncContractPenaltyMaster"
													]
												}
											},
											"response": []
										},
										{
											"name": "penaltyType = 'specific' & 'prorate'",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test('Schema is valid', function() {\r",
															"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
															"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Check response is Correct\", function () {\r",
															"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
															"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 2 | EB0044 : Penalty Group Id : 111335 is Invalid Penalty Type.\")\r",
															"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 4 | EB0044 : Penalty Group Id : 111336 is Invalid Penalty Type.\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n        \"penaltyList\" :[{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyType\":\"specific\",\r\n                        \"penaltyGroupId\":\"111335\",\r\n                        \"penaltyId\":\"6\",\r\n                        \"penaltySeq\":\"1\",\r\n                        \"penaltyFee\":\"100.00\",\r\n                        \"monthStart\":\"2\",\r\n                        \"monthEnd\":\"8\",\r\n                        \"createBy\":\"{{createBy}}\"\r\n                },{    \r\n                        \"action\":\"Add\",\r\n                        \"penaltyType\":\"prorate\",\r\n                        \"penaltyGroupId\":\"111335\",\r\n                        \"penaltyId\":\"7\",\r\n                        \"penaltySeq\":\"2\",\r\n                        \"penaltyFee\":\"100.00\",\r\n                        \"monthStart\":\"8\",\r\n                        \"monthEnd\":\"12\",\r\n                        \"createBy\":\"{{createBy}}\"   \r\n                 },{ \r\n                               \"action\":\"Add\",\r\n                        \"penaltyType\":\"specific\",\r\n                        \"penaltyGroupId\":\"111336\",\r\n                        \"penaltyId\":\"7\",\r\n                        \"penaltySeq\":\"2\",\r\n                        \"penaltyFee\":\"100.00\",\r\n                        \"monthStart\":\"8\",\r\n                        \"monthEnd\":\"12\",\r\n                        \"createBy\":\"{{createBy}}\"   \r\n                 },{ \r\n                        \"action\":\"Add\",\r\n                        \"penaltyType\":\"prorate\",\r\n                        \"penaltyGroupId\":\"111336\",\r\n                        \"penaltyId\":\"8\",\r\n                        \"penaltySeq\":\"3\",\r\n                        \"penaltyFee\":\"100.00\",\r\n                        \"monthStart\":\"8\",\r\n                        \"monthEnd\":\"12\",\r\n                        \"createBy\":\"{{createBy}}\"   \r\n        }],                        \r\n     \"sourceSystem\":\"{{sourceSystem}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
													"protocol": "http",
													"host": [
														"10",
														"138",
														"34",
														"239"
													],
													"port": "3300",
													"path": [
														"api",
														"v4",
														"evSyncContractPenaltyMaster"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "GroupId Duplicated with DB",
							"item": [
								{
									"name": "Data Set = 1",
									"item": [
										{
											"name": "penaltyType = 'specific'",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var reqBody = {\r",
															"    \"penaltyList\": [\r",
															"        {\r",
															"            \"action\": \"Add\",\r",
															"            \"penaltyType\": \"specific\",\r",
															"            \"penaltyGroupId\": pm.variables.replaceIn('PN'+'{{$timestamp}}'),\r",
															"            \"penaltyId\": pm.variables.replaceIn('{{$randomBankAccount}}'),\r",
															"            \"penaltySeq\": pm.variables.replaceIn('{{$randomInt}}'),\r",
															"            \"penaltyFee\": \"100.00\",\r",
															"            \"monthStart\": \"0\",\r",
															"            \"monthEnd\": \"2\",\r",
															"            \"createBy\": pm.environment.get(\"createBy\")\r",
															"        }\r",
															"    ],\r",
															"    \"sourceSystem\": pm.environment.get(\"sourceSystem\")\r",
															"}\r",
															"\r",
															"console.log(reqBody)\r",
															"pm.globals.set(\"Add_penaltyGroupId\", reqBody.penaltyList[0].penaltyGroupId);\r",
															"pm.globals.set(\"Add_penaltyId\", reqBody.penaltyList[0].penaltyId);\r",
															"pm.globals.set(\"Add_penaltySeq\", reqBody.penaltyList[0].penaltySeq);\r",
															"\r",
															"const postRequest = {\r",
															"  url: pm.environment.get(\"url\")+pm.environment.get(\"_evSyncContractPenaltyMaster\"),\r",
															"  method: 'POST',\r",
															"  header: {\r",
															"    'Content-Type': 'application/json'\r",
															"  },\r",
															"  body: {\r",
															"    mode: 'raw',\r",
															"    raw: JSON.stringify(reqBody)\r",
															"  }\r",
															"};\r",
															"pm.sendRequest(postRequest, (error, response) => {\r",
															"  console.log(error ? error : response.json());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test('Schema is valid', function() {\r",
															"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
															"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Check response is Correct\", function () {\r",
															"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
															"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB1239 : Duplicate Penalty Group ID: \"+pm.globals.get('Add_penaltyGroupId')+\" record found\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"{{Add_penaltyGroupId}}\",\r\n            \"penaltyId\": \"{{Add_penaltyId}}\",\r\n            \"penaltySeq\": \"{{Add_penaltySeq}}\",\r\n            \"penaltyFee\": \"100.0\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/v4/evSyncContractPenaltyMaster",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v4",
														"evSyncContractPenaltyMaster"
													]
												}
											},
											"response": []
										},
										{
											"name": "penaltyType = 'specific' & 'prorate'",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var reqBody = {\r",
															"    \"penaltyList\": [\r",
															"        {\r",
															"            \"action\": \"Add\",\r",
															"            \"penaltyType\": \"specific\",\r",
															"            \"penaltyGroupId\": pm.variables.replaceIn('PN1'+'{{$timestamp}}'),\r",
															"            \"penaltyId\": pm.variables.replaceIn('{{$randomBankAccount}}'),\r",
															"            \"penaltySeq\": pm.variables.replaceIn('{{$randomInt}}'),\r",
															"            \"penaltyFee\": \"100.00\",\r",
															"            \"monthStart\": \"0\",\r",
															"            \"monthEnd\": \"2\",\r",
															"            \"createBy\": pm.environment.get(\"createBy\")\r",
															"        },\r",
															"                {\r",
															"            \"action\": \"Add\",\r",
															"            \"penaltyType\": \"prorate\",\r",
															"            \"penaltyGroupId\": pm.variables.replaceIn('PN2'+'{{$timestamp}}'),\r",
															"            \"penaltyId\": pm.variables.replaceIn('{{$randomBankAccount}}'),\r",
															"            \"penaltySeq\": pm.variables.replaceIn('{{$randomInt}}'),\r",
															"            \"penaltyFee\": \"100.00\",\r",
															"            \"monthStart\": \"0\",\r",
															"            \"monthEnd\": \"2\",\r",
															"            \"createBy\": pm.environment.get(\"createBy\")\r",
															"        }\r",
															"    ],\r",
															"    \"sourceSystem\": pm.environment.get(\"sourceSystem\")\r",
															"}\r",
															"\r",
															"pm.test(\"Create dynamic variable\", function () {\r",
															"     for(var i = 0;i < reqBody.penaltyList.length ;i++){\r",
															"      pm.globals.set(\"Add_penaltyGroupId_\"+[i], reqBody.penaltyList[i].penaltyGroupId);\r",
															"      pm.globals.set(\"Add_penaltyId_\"+[i], reqBody.penaltyList[i].penaltyId);\r",
															"      pm.globals.set(\"Add_penaltySeq_\"+[i], reqBody.penaltyList[i].penaltySeq);\r",
															"    }\r",
															"});\r",
															"\r",
															"const postRequest = {\r",
															"  url: pm.environment.get(\"url\")+pm.environment.get(\"_evSyncContractPenaltyMaster\"),\r",
															"  method: 'POST',\r",
															"  header: {\r",
															"    'Content-Type': 'application/json'\r",
															"  },\r",
															"  body: {\r",
															"    mode: 'raw',\r",
															"    raw: JSON.stringify(reqBody)\r",
															"  }\r",
															"};\r",
															"pm.sendRequest(postRequest, (error, response) => {\r",
															"  console.log(error ? error : response.json());\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test('Schema is valid', function() {\r",
															"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
															"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Check response is Correct\", function () {\r",
															"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
															"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB1239 : Duplicate Penalty Group ID: \"+pm.globals.get('Add_penaltyGroupId_0')+\" record found\");\r",
															"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB1239 : Duplicate Penalty Id: \"+pm.globals.get('Add_penaltyId_1')+\", Penalty SEQ: \"+pm.globals.get('Add_penaltySeq_1')+\" record found\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"{{Add_penaltyGroupId_0}}\",\r\n            \"penaltyId\": \"{{Add_penaltyId_0}}\",\r\n            \"penaltySeq\": \"{{Add_penaltySeq_0}}\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"0\",\r\n            \"monthEnd\": \"1\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"prorate\",\r\n            \"penaltyGroupId\": \"{{Add_penaltyGroupId_1}}\",\r\n            \"penaltyId\": \"{{Add_penaltyId_1}}\",\r\n            \"penaltySeq\": \"{{Add_penaltySeq_1}}\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"2\",\r\n            \"monthEnd\": \"4\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/v4/evSyncContractPenaltyMaster",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v4",
														"evSyncContractPenaltyMaster"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Data Set > 2",
									"item": [
										{
											"name": "penaltyType = 'specific'",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var reqBody = {\r",
															"    \"penaltyList\": [\r",
															"        {\r",
															"            \"action\": \"Add\",\r",
															"            \"penaltyType\": \"specific\",\r",
															"            \"penaltyGroupId\": pm.variables.replaceIn('PN1'+'{{$timestamp}}'),\r",
															"            \"penaltyId\": pm.variables.replaceIn('{{$randomBankAccount}}'),\r",
															"            \"penaltySeq\": pm.variables.replaceIn('{{$randomInt}}'),\r",
															"            \"penaltyFee\": \"100.00\",\r",
															"            \"monthStart\": \"0\",\r",
															"            \"monthEnd\": \"2\",\r",
															"            \"createBy\": pm.environment.get(\"createBy\")\r",
															"        },\r",
															"                {\r",
															"            \"action\": \"Add\",\r",
															"            \"penaltyType\": \"specific\",\r",
															"            \"penaltyGroupId\": pm.variables.replaceIn('PN2'+'{{$timestamp}}'),\r",
															"            \"penaltyId\": pm.variables.replaceIn('{{$randomBankAccount}}'),\r",
															"            \"penaltySeq\": pm.variables.replaceIn('{{$randomInt}}'),\r",
															"            \"penaltyFee\": \"100.00\",\r",
															"            \"monthStart\": \"0\",\r",
															"            \"monthEnd\": \"2\",\r",
															"            \"createBy\": pm.environment.get(\"createBy\")\r",
															"        }\r",
															"    ],\r",
															"    \"sourceSystem\": pm.environment.get(\"sourceSystem\")\r",
															"}\r",
															"\r",
															"pm.test(\"Create dynamic variable\", function () {\r",
															"     for(var i = 0;i < reqBody.penaltyList.length ;i++){\r",
															"      pm.globals.set(\"Add_penaltyGroupId_\"+[i], reqBody.penaltyList[i].penaltyGroupId);\r",
															"      pm.globals.set(\"Add_penaltyId_\"+[i], reqBody.penaltyList[i].penaltyId);\r",
															"      pm.globals.set(\"Add_penaltySeq_\"+[i], reqBody.penaltyList[i].penaltySeq);\r",
															"    }\r",
															"});\r",
															"\r",
															"const postRequest = {\r",
															"  url: pm.environment.get(\"url\")+pm.environment.get(\"_evSyncContractPenaltyMaster\"),\r",
															"  method: 'POST',\r",
															"  header: {\r",
															"    'Content-Type': 'application/json'\r",
															"  },\r",
															"  body: {\r",
															"    mode: 'raw',\r",
															"    raw: JSON.stringify(reqBody)\r",
															"  }\r",
															"};\r",
															"pm.sendRequest(postRequest, (error, response) => {\r",
															"  console.log(error ? error : response.json());\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test('Schema is valid', function() {\r",
															"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
															"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Check response is Correct\", function () {\r",
															"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
															"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB1239 : Duplicate Penalty Group ID: \"+pm.globals.get('Add_penaltyGroupId_0')+\" record found\");\r",
															"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB1239 : Duplicate Penalty Group ID: \"+pm.globals.get('Add_penaltyGroupId_1')+\" record found\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"{{Add_penaltyGroupId_0}}\",\r\n            \"penaltyId\": \"99\",\r\n            \"penaltySeq\": \"9\",\r\n            \"penaltyFee\": \"100.0\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },{\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"{{Add_penaltyGroupId_1}}\",\r\n            \"penaltyId\": \"99\",\r\n            \"penaltySeq\": \"9\",\r\n            \"penaltyFee\": \"100.0\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/v4/evSyncContractPenaltyMaster",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v4",
														"evSyncContractPenaltyMaster"
													]
												}
											},
											"response": []
										},
										{
											"name": "penaltyType = 'specific' & 'prorate'",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson = pm.response.json();\r",
															"\r",
															"pm.test(\"Response time is less than 30000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test('Schema is valid', function() {\r",
															"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
															"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Check response is Correct\", function () {\r",
															"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
															"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB1239 : Duplicate Penalty Group ID: \"+pm.globals.get('Add_penaltyGroupId_0')+\" record found\");\r",
															"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB1239 : Duplicate Penalty Id: \"+pm.globals.get('Add_penaltyId_1')+\", Penalty SEQ: \"+pm.globals.get('Add_penaltySeq_1')+\" record found\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var reqBody = {\r",
															"    \"penaltyList\": [\r",
															"        {\r",
															"            \"action\": \"Add\",\r",
															"            \"penaltyType\": \"specific\",\r",
															"            \"penaltyGroupId\": pm.variables.replaceIn('PN1'+'{{$timestamp}}'),\r",
															"            \"penaltyId\": pm.variables.replaceIn('{{$randomBankAccount}}'),\r",
															"            \"penaltySeq\": pm.variables.replaceIn('{{$randomInt}}'),\r",
															"            \"penaltyFee\": \"100.00\",\r",
															"            \"monthStart\": \"0\",\r",
															"            \"monthEnd\": \"2\",\r",
															"            \"createBy\": pm.environment.get(\"createBy\")\r",
															"        },\r",
															"                {\r",
															"            \"action\": \"Add\",\r",
															"            \"penaltyType\": \"prorate\",\r",
															"            \"penaltyGroupId\": pm.variables.replaceIn('PN2'+'{{$timestamp}}'),\r",
															"            \"penaltyId\": pm.variables.replaceIn('{{$randomBankAccount}}'),\r",
															"            \"penaltySeq\": pm.variables.replaceIn('{{$randomInt}}'),\r",
															"            \"penaltyFee\": \"100.00\",\r",
															"            \"monthStart\": \"0\",\r",
															"            \"monthEnd\": \"2\",\r",
															"            \"createBy\": pm.environment.get(\"createBy\")\r",
															"        }\r",
															"    ],\r",
															"    \"sourceSystem\": pm.environment.get(\"sourceSystem\")\r",
															"}\r",
															"\r",
															"pm.test(\"Create dynamic variable\", function () {\r",
															"     for(var i = 0;i < reqBody.penaltyList.length ;i++){\r",
															"      pm.globals.set(\"Add_penaltyGroupId_\"+[i], reqBody.penaltyList[i].penaltyGroupId);\r",
															"      pm.globals.set(\"Add_penaltyId_\"+[i], reqBody.penaltyList[i].penaltyId);\r",
															"      pm.globals.set(\"Add_penaltySeq_\"+[i], reqBody.penaltyList[i].penaltySeq);\r",
															"    }\r",
															"});\r",
															"\r",
															"const postRequest = {\r",
															"  url: pm.environment.get(\"url\")+pm.environment.get(\"_evSyncContractPenaltyMaster\"),\r",
															"  method: 'POST',\r",
															"  header: {\r",
															"    'Content-Type': 'application/json'\r",
															"  },\r",
															"  body: {\r",
															"    mode: 'raw',\r",
															"    raw: JSON.stringify(reqBody)\r",
															"  }\r",
															"};\r",
															"pm.sendRequest(postRequest, (error, response) => {\r",
															"  console.log(error ? error : response.json());\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"{{Add_penaltyGroupId_0}}\",\r\n            \"penaltyId\": \"{{Add_penaltyId_0}}\",\r\n            \"penaltySeq\": \"{{Add_penaltySeq_0}}\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"6\",\r\n            \"monthEnd\": \"12\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },{\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"prorate\",\r\n            \"penaltyGroupId\": \"{{Add_penaltyGroupId_1}}\",\r\n            \"penaltyId\": \"{{Add_penaltyId_1}}\",\r\n            \"penaltySeq\": \"{{Add_penaltySeq_1}}\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"2\",\r\n            \"monthEnd\": \"4\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/v4/evSyncContractPenaltyMaster",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v4",
														"evSyncContractPenaltyMaster"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "PenaltyType is Prorate",
					"item": [
						{
							"name": "PenaltyList",
							"item": [
								{
									"name": "EB0044 monthStart=monthEnd (Dataset 2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 2 | EB0044 : Month Start - Month End of penalty Penalty Group Id:452 is Invalid\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"prorate\",\r\n            \"penaltyGroupId\": \"12534\",\r\n            \"penaltyId\": \"8\",\r\n            \"penaltySeq\": \"2\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"0\",\r\n            \"monthEnd\": \"3\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"prorate\",\r\n            \"penaltyGroupId\": \"452\",\r\n            \"penaltyId\": \"15\",\r\n            \"penaltySeq\": \"24\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"4\",\r\n            \"monthEnd\": \"4\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractPenaltyMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0044 index=0, monthstart !=0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0044 : Month Start - Month End of penalty Penalty Group Id:1234 is Invalid\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"penaltyList\" :[{\r\n                \"action\":\"Add\",\r\n                \"penaltyType\":\"prorate\",\r\n                \"penaltyGroupId\":\"1234\",\r\n                \"penaltyId\":\"1\",\r\n                \"penaltySeq\":\"2\",\r\n                \"penaltyFee\":\"100.00\",\r\n                \"monthStart\":\"1\",\r\n                \"monthEnd\":\"7\",\r\n                \"createBy\":\"{{createBy}}\"\r\n        }],                        \r\n     \"sourceSystem\":\"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractPenaltyMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0044 index=0, monthstart !=0 (Dataset 2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0044 : Month Start - Month End of penalty Penalty Group Id:1234 is Invalid\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"penaltyList\" :[{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyType\":\"prorate\",\r\n                        \"penaltyGroupId\":\"1234\",\r\n                        \"penaltyId\":\"1\",\r\n                        \"penaltySeq\":\"2\",\r\n                        \"penaltyFee\":\"100.00\",\r\n                        \"monthStart\":\"1\",\r\n                        \"monthEnd\":\"7\",\r\n                        \"createBy\":\"{{createBy}}\"\r\n        },{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyType\":\"prorate\",\r\n                        \"penaltyGroupId\":\"42\",\r\n                        \"penaltyId\":\"15\",\r\n                        \"penaltySeq\":\"24\",\r\n                        \"penaltyFee\":\"100.00\",\r\n                        \"monthStart\":\"4\",\r\n                        \"monthEnd\":\"5\",\r\n                        \"createBy\":\"{{createBy}}\"\r\n        }],                        \r\n     \"sourceSystem\":\"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractPenaltyMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0044 monthEnd < monthStart",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var reqBody = {\r",
													"    \"penaltyList\": [\r",
													"        {\r",
													"            \"action\": \"Add\",\r",
													"            \"penaltyType\": \"prorate\",\r",
													"            \"penaltyGroupId\": pm.variables.replaceIn('PN'+'{{$timestamp}}'),\r",
													"            \"penaltyId\": pm.variables.replaceIn('{{$randomBankAccount}}'),\r",
													"            \"penaltySeq\": pm.variables.replaceIn('{{$randomInt}}'),\r",
													"            \"penaltyFee\": \"100.00\",\r",
													"            \"monthStart\": \"0\",\r",
													"            \"monthEnd\": \"2\",\r",
													"            \"createBy\": pm.environment.get(\"createBy\")\r",
													"        }\r",
													"    ],\r",
													"    \"sourceSystem\": pm.environment.get(\"sourceSystem\")\r",
													"}\r",
													"\r",
													"console.log(reqBody)\r",
													"pm.globals.set(\"Add_penaltyGroupId\", reqBody.penaltyList[0].penaltyGroupId);\r",
													"pm.globals.set(\"Add_penaltyId\", reqBody.penaltyList[0].penaltyId);\r",
													"pm.globals.set(\"Add_penaltySeq\", reqBody.penaltyList[0].penaltySeq);\r",
													"\r",
													"const postRequest = {\r",
													"  url: pm.environment.get(\"url\")+pm.environment.get(\"_evSyncContractPenaltyMaster\"),\r",
													"  method: 'POST',\r",
													"  header: {\r",
													"    'Content-Type': 'application/json'\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'raw',\r",
													"    raw: JSON.stringify(reqBody)\r",
													"  }\r",
													"};\r",
													"pm.sendRequest(postRequest, (error, response) => {\r",
													"  console.log(error ? error : response.json());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0044 : Month Start - Month End of penalty Penalty Group Id:234 is Invalid\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"penaltyList\" :[{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyType\":\"prorate\",\r\n                        \"penaltyGroupId\":\"234\",\r\n                        \"penaltyId\":\"9\",\r\n                        \"penaltySeq\":\"3\",\r\n                        \"penaltyFee\":\"100.00\",\r\n                        \"monthStart\":\"3\",\r\n                        \"monthEnd\":\"2\",\r\n                        \"createBy\":\"TNLPCXO2\"\r\n        }],                        \r\n     \"sourceSystem\":\"SFF\"\r\n}"
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0044 monthEnd < monthStart (Dataset 2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0044 : Month Start - Month End of penalty Penalty Group Id:23400 is Invalid\");\r",
													"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB0044 : Month Start - Month End of penalty Penalty Group Id:42300 is Invalid\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"penaltyList\" :[{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyType\":\"prorate\",\r\n                        \"penaltyGroupId\":\"23400\",\r\n                        \"penaltyId\":\"19\",\r\n                        \"penaltySeq\":\"3\",\r\n                        \"penaltyFee\":\"100.00\",\r\n                        \"monthStart\":\"3\",\r\n                        \"monthEnd\":\"2\",\r\n                        \"createBy\":\"{{createBy}}\"\r\n        },{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyType\":\"prorate\",\r\n                        \"penaltyGroupId\":\"42300\",\r\n                        \"penaltyId\":\"58\",\r\n                        \"penaltySeq\":\"1\",\r\n                        \"penaltyFee\":\"100.00\",\r\n                        \"monthStart\":\"6\",\r\n                        \"monthEnd\":\"1\",\r\n                        \"createBy\":\"{{createBy}}\"\r\n        }],                        \r\n     \"sourceSystem\":\"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractPenaltyMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0044 monthEnd=0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0044 : Month Start - Month End of penalty Penalty Group Id:420385499 is Invalid\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n        \"penaltyList\" :[{\r\n                        \"action\":\"Add\",\r\n                        \"penaltyType\":\"prorate\",\r\n                        \"penaltyGroupId\":\"420385499\",\r\n                        \"penaltyId\":\"87\",\r\n                        \"penaltySeq\":\"10\",\r\n                        \"penaltyFee\":\"100.00\",\r\n                        \"monthStart\":\"0\",\r\n                        \"monthEnd\":\"0\",\r\n                        \"createBy\":\"{{createBy}}\"\r\n        }],                        \r\n     \"sourceSystem\":\"{{sourceSystem}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractPenaltyMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0044 monthEnd=0 (Dataset 2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0044 : Month Start - Month End of penalty Penalty Group Id:4203854 is Invalid\");\r",
													"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB0044 : Month Start - Month End of penalty Penalty Group Id:420385422 is Invalid\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"prorate\",\r\n            \"penaltyGroupId\": \"4203854\",\r\n            \"penaltyId\": \"9\",\r\n            \"penaltySeq\": \"13\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"3\",\r\n            \"monthEnd\": \"1\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"prorate\",\r\n            \"penaltyGroupId\": \"420385422\",\r\n            \"penaltyId\": \"89\",\r\n            \"penaltySeq\": \"1\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"4\",\r\n            \"monthEnd\": \"0\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "http://10.138.34.239:3300/api/v4/evSyncContractPenaltyMaster",
											"protocol": "http",
											"host": [
												"10",
												"138",
												"34",
												"239"
											],
											"port": "3300",
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Database",
							"item": [
								{
									"name": "EB0044 penaltyStart != lastmonthEnd",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0044 : Month Start - Month End of penalty Penalty Group Id:\"+pm.globals.get('Add_penaltyGroupId')+\" is Invalid\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var reqBody = {\r",
													"    \"penaltyList\": [\r",
													"        {\r",
													"            \"action\": \"Add\",\r",
													"            \"penaltyType\": \"prorate\",\r",
													"            \"penaltyGroupId\": pm.variables.replaceIn('PN'+'{{$timestamp}}'),\r",
													"            \"penaltyId\": pm.variables.replaceIn('{{$randomBankAccount}}'),\r",
													"            \"penaltySeq\": pm.variables.replaceIn('{{$randomInt}}'),\r",
													"            \"penaltyFee\": \"100.00\",\r",
													"            \"monthStart\": \"0\",\r",
													"            \"monthEnd\": \"2\",\r",
													"            \"createBy\": pm.environment.get(\"createBy\")\r",
													"        }\r",
													"    ],\r",
													"    \"sourceSystem\": pm.environment.get(\"sourceSystem\")\r",
													"}\r",
													"\r",
													"console.log(reqBody)\r",
													"pm.globals.set(\"Add_penaltyGroupId\", reqBody.penaltyList[0].penaltyGroupId);\r",
													"pm.globals.set(\"Add_penaltyId\", reqBody.penaltyList[0].penaltyId);\r",
													"pm.globals.set(\"Add_penaltySeq\", reqBody.penaltyList[0].penaltySeq);\r",
													"\r",
													"const postRequest = {\r",
													"  url: pm.environment.get(\"url\")+pm.environment.get(\"_evSyncContractPenaltyMaster\"),\r",
													"  method: 'POST',\r",
													"  header: {\r",
													"    'Content-Type': 'application/json'\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'raw',\r",
													"    raw: JSON.stringify(reqBody)\r",
													"  }\r",
													"};\r",
													"pm.sendRequest(postRequest, (error, response) => {\r",
													"  console.log(error ? error : response.json());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"prorate\",\r\n            \"penaltyGroupId\": \"{{Add_penaltyGroupId}}\",\r\n            \"penaltyId\": \"{{Add_penaltyId}}\",\r\n            \"penaltySeq\": \"{{Add_penaltySeq}}\",\r\n            \"penaltyFee\": \"1000.00\",\r\n            \"monthStart\": \"1\",\r\n            \"monthEnd\": \"5\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractPenaltyMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0044 penaltyStart != lastmonthEnd (Dataset 2)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var reqBody = {\r",
													"    \"penaltyList\": [\r",
													"        {\r",
													"            \"action\": \"Add\",\r",
													"            \"penaltyType\": \"prorate\",\r",
													"            \"penaltyGroupId\": pm.variables.replaceIn('PN1'+'{{$timestamp}}'),\r",
													"            \"penaltyId\": pm.variables.replaceIn('{{$randomBankAccount}}'),\r",
													"            \"penaltySeq\": pm.variables.replaceIn('{{$randomInt}}'),\r",
													"            \"penaltyFee\": \"100.00\",\r",
													"            \"monthStart\": \"0\",\r",
													"            \"monthEnd\": \"2\",\r",
													"            \"createBy\": pm.environment.get(\"createBy\")\r",
													"        },\r",
													"                {\r",
													"            \"action\": \"Add\",\r",
													"            \"penaltyType\": \"prorate\",\r",
													"            \"penaltyGroupId\": pm.variables.replaceIn('PN2'+'{{$timestamp}}'),\r",
													"            \"penaltyId\": pm.variables.replaceIn('{{$randomBankAccount}}'),\r",
													"            \"penaltySeq\": pm.variables.replaceIn('{{$randomInt}}'),\r",
													"            \"penaltyFee\": \"100.00\",\r",
													"            \"monthStart\": \"0\",\r",
													"            \"monthEnd\": \"2\",\r",
													"            \"createBy\": pm.environment.get(\"createBy\")\r",
													"        }\r",
													"    ],\r",
													"    \"sourceSystem\": pm.environment.get(\"sourceSystem\")\r",
													"}\r",
													"\r",
													"pm.test(\"Create dynamic variable\", function () {\r",
													"     for(var i = 0;i < reqBody.penaltyList.length ;i++){\r",
													"      pm.globals.set(\"Add_penaltyGroupId_\"+[i], reqBody.penaltyList[i].penaltyGroupId);\r",
													"      pm.globals.set(\"Add_penaltyId_\"+[i], reqBody.penaltyList[i].penaltyId);\r",
													"      pm.globals.set(\"Add_penaltySeq_\"+[i], reqBody.penaltyList[i].penaltySeq);\r",
													"    }\r",
													"});\r",
													"\r",
													"const postRequest = {\r",
													"  url: pm.environment.get(\"url\")+pm.environment.get(\"_evSyncContractPenaltyMaster\"),\r",
													"  method: 'POST',\r",
													"  header: {\r",
													"    'Content-Type': 'application/json'\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'raw',\r",
													"    raw: JSON.stringify(reqBody)\r",
													"  }\r",
													"};\r",
													"pm.sendRequest(postRequest, (error, response) => {\r",
													"  console.log(error ? error : response.json());\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0044 : Month Start - Month End of penalty Penalty Group Id:\"+pm.globals.get('Add_penaltyGroupId_0')+\" is Invalid\");\r",
													"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB0044 : Month Start - Month End of penalty Penalty Group Id:\"+pm.globals.get('Add_penaltyGroupId_1')+\" is Invalid\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"prorate\",\r\n            \"penaltyGroupId\": \"{{Add_penaltyGroupId_0}}\",\r\n            \"penaltyId\": \"{{Add_penaltyId_0}}\",\r\n            \"penaltySeq\": \"99\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"5\",\r\n            \"monthEnd\": \"10\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        },\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"prorate\",\r\n            \"penaltyGroupId\": \"{{Add_penaltyGroupId_1}}\",\r\n            \"penaltyId\": \"{{Add_penaltyId_1}}\",\r\n            \"penaltySeq\": \"99\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"5\",\r\n            \"monthEnd\": \"10\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractPenaltyMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0044 monthEnd < lastmonthEnd",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var reqBody = {\r",
													"    \"penaltyList\": [\r",
													"        {\r",
													"            \"action\": \"Add\",\r",
													"            \"penaltyType\": \"prorate\",\r",
													"            \"penaltyGroupId\": pm.variables.replaceIn('PN'+'{{$timestamp}}'),\r",
													"            \"penaltyId\": pm.variables.replaceIn('{{$randomBankAccount}}'),\r",
													"            \"penaltySeq\": pm.variables.replaceIn('{{$randomInt}}'),\r",
													"            \"penaltyFee\": \"100.00\",\r",
													"            \"monthStart\": \"0\",\r",
													"            \"monthEnd\": \"5\",\r",
													"            \"createBy\": pm.environment.get(\"createBy\")\r",
													"        }\r",
													"    ],\r",
													"    \"sourceSystem\": pm.environment.get(\"sourceSystem\")\r",
													"}\r",
													"\r",
													"console.log(reqBody)\r",
													"pm.globals.set(\"Add_penaltyGroupId\", reqBody.penaltyList[0].penaltyGroupId);\r",
													"pm.globals.set(\"Add_penaltyId\", reqBody.penaltyList[0].penaltyId);\r",
													"pm.globals.set(\"Add_penaltySeq\", reqBody.penaltyList[0].penaltySeq);\r",
													"\r",
													"const postRequest = {\r",
													"  url: pm.environment.get(\"url\")+pm.environment.get(\"_evSyncContractPenaltyMaster\"),\r",
													"  method: 'POST',\r",
													"  header: {\r",
													"    'Content-Type': 'application/json'\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'raw',\r",
													"    raw: JSON.stringify(reqBody)\r",
													"  }\r",
													"};\r",
													"pm.sendRequest(postRequest, (error, response) => {\r",
													"  console.log(error ? error : response.json());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0044 : Month Start - Month End of penalty Penalty Group Id:\"+pm.globals.get('Add_penaltyGroupId')+\" is Invalid\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"prorate\",\r\n            \"penaltyGroupId\": \"{{Add_penaltyGroupId}}\",\r\n            \"penaltyId\": \"{{Add_penaltyId}}\",\r\n            \"penaltySeq\": \"{{Add_penaltySeq}}\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"3\",\r\n            \"monthEnd\": \"2\",\r\n            \"createBy\": \"TNLPCXO2\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"SFF\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractPenaltyMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								},
								{
									"name": "EB0044 monthEnd < lastmonthEnd (Dataset 2)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var reqBody = {\r",
													"    \"penaltyList\": [\r",
													"        {\r",
													"            \"action\": \"Add\",\r",
													"            \"penaltyType\": \"prorate\",\r",
													"            \"penaltyGroupId\": pm.variables.replaceIn('PN1'+'{{$timestamp}}'),\r",
													"            \"penaltyId\": pm.variables.replaceIn('{{$randomBankAccount}}'),\r",
													"            \"penaltySeq\": pm.variables.replaceIn('{{$randomInt}}'),\r",
													"            \"penaltyFee\": \"100.00\",\r",
													"            \"monthStart\": \"0\",\r",
													"            \"monthEnd\": \"5\",\r",
													"            \"createBy\": pm.environment.get(\"createBy\")\r",
													"        },\r",
													"                {\r",
													"            \"action\": \"Add\",\r",
													"            \"penaltyType\": \"prorate\",\r",
													"            \"penaltyGroupId\": pm.variables.replaceIn('PN2'+'{{$timestamp}}'),\r",
													"            \"penaltyId\": pm.variables.replaceIn('{{$randomBankAccount}}'),\r",
													"            \"penaltySeq\": pm.variables.replaceIn('{{$randomInt}}'),\r",
													"            \"penaltyFee\": \"100.00\",\r",
													"            \"monthStart\": \"0\",\r",
													"            \"monthEnd\": \"7\",\r",
													"            \"createBy\": pm.environment.get(\"createBy\")\r",
													"        }\r",
													"    ],\r",
													"    \"sourceSystem\": pm.environment.get(\"sourceSystem\")\r",
													"}\r",
													"\r",
													"pm.test(\"Create dynamic variable\", function () {\r",
													"     for(var i = 0;i < reqBody.penaltyList.length ;i++){\r",
													"      pm.globals.set(\"Add_penaltyGroupId_\"+[i], reqBody.penaltyList[i].penaltyGroupId);\r",
													"      pm.globals.set(\"Add_penaltyId_\"+[i], reqBody.penaltyList[i].penaltyId);\r",
													"      pm.globals.set(\"Add_penaltySeq_\"+[i], reqBody.penaltyList[i].penaltySeq);\r",
													"    }\r",
													"});\r",
													"\r",
													"const postRequest = {\r",
													"  url: pm.environment.get(\"url\")+pm.environment.get(\"_evSyncContractPenaltyMaster\"),\r",
													"  method: 'POST',\r",
													"  header: {\r",
													"    'Content-Type': 'application/json'\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'raw',\r",
													"    raw: JSON.stringify(reqBody)\r",
													"  }\r",
													"};\r",
													"pm.sendRequest(postRequest, (error, response) => {\r",
													"  console.log(error ? error : response.json());\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', function() {\r",
													"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
													"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response is Correct\", function () {\r",
													"    pm.expect(responseJson.status).to.equal(\"Error\");\r",
													"    pm.expect(responseJson.errorMessage[0]).to.equal(\"Data set 1 | EB0044 : Month Start - Month End of penalty Penalty Group Id:\"+pm.globals.get('Add_penaltyGroupId_0')+\" is Invalid\");\r",
													"    pm.expect(responseJson.errorMessage[1]).to.equal(\"Data set 2 | EB0044 : Month Start - Month End of penalty Penalty Group Id:\"+pm.globals.get('Add_penaltyGroupId_1')+\" is Invalid\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"prorate\",\r\n            \"penaltyGroupId\": \"{{Add_penaltyGroupId_0}}\",\r\n            \"penaltyId\": \"{{Add_penaltyId_0}}\",\r\n            \"penaltySeq\": \"{{Add_penaltySeq_0}}\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"3\",\r\n            \"monthEnd\": \"2\",\r\n            \"createBy\": \"TNLPCXO2\"\r\n        },\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"prorate\",\r\n            \"penaltyGroupId\": \"{{Add_penaltyGroupId_1}}\",\r\n            \"penaltyId\": \"{{Add_penaltyId_1}}\",\r\n            \"penaltySeq\": \"{{Add_penaltySeq_1}}\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"3\",\r\n            \"monthEnd\": \"2\",\r\n            \"createBy\": \"TNLPCXO2\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}"
										},
										"url": {
											"raw": "{{url}}/api/v4/evSyncContractPenaltyMaster",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v4",
												"evSyncContractPenaltyMaster"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Success case",
					"item": [
						{
							"name": "Add : Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"var reqBody = pm.request.body.raw;\r",
											"\r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Success\");\r",
											"    pm.expect(responseJson.errorMessage).to.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"specific\",\r\n            \"penaltyGroupId\": \"PN{{$timestamp}}\",\r\n            \"penaltyId\": \"{{$randomBankAccount}}\",\r\n            \"penaltySeq\": \"{{$randomInt}}\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"1\",\r\n            \"monthEnd\": \"2\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v4/evSyncContractPenaltyMaster",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v4",
										"evSyncContractPenaltyMaster"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add : Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"var reqBody = pm.request.body.raw;\r",
											"\r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Success\");\r",
											"    pm.expect(responseJson.errorMessage).to.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Add\",\r\n            \"penaltyType\": \"prorate\",\r\n            \"penaltyGroupId\": \"PN{{$timestamp}}\",\r\n            \"penaltyId\": \"{{$randomBankAccount}}\",\r\n            \"penaltySeq\": \"{{$randomInt}}\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"0\",\r\n            \"monthEnd\": \"2\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v4/evSyncContractPenaltyMaster",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v4",
										"evSyncContractPenaltyMaster"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete : Success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var reqBody = {\r",
											"    \"penaltyList\": [\r",
											"        {\r",
											"            \"action\": \"Add\",\r",
											"            \"penaltyType\": \"specific\",\r",
											"            \"penaltyGroupId\": pm.variables.replaceIn('PN'+'{{$timestamp}}'),\r",
											"            \"penaltyId\": pm.variables.replaceIn('{{$randomBankAccount}}'),\r",
											"            \"penaltySeq\": pm.variables.replaceIn('{{$randomInt}}'),\r",
											"            \"penaltyFee\": \"100.00\",\r",
											"            \"monthStart\": \"0\",\r",
											"            \"monthEnd\": \"2\",\r",
											"            \"createBy\": pm.environment.get(\"createBy\")\r",
											"        }\r",
											"    ],\r",
											"    \"sourceSystem\": pm.environment.get(\"sourceSystem\")\r",
											"}\r",
											"\r",
											"console.log(reqBody)\r",
											"pm.globals.set(\"DEL_penaltyGroupId\", reqBody.penaltyList[0].penaltyGroupId);\r",
											"pm.globals.set(\"DEL_penaltyId\", reqBody.penaltyList[0].penaltyId);\r",
											"pm.globals.set(\"DEL_penaltySeq\", reqBody.penaltyList[0].penaltySeq);\r",
											"\r",
											"const postRequest = {\r",
											"  url: pm.environment.get(\"url\")+pm.environment.get(\"_evSyncContractPenaltyMaster\"),\r",
											"  method: 'POST',\r",
											"  header: {\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw: JSON.stringify(reqBody)\r",
											"  }\r",
											"};\r",
											"pm.sendRequest(postRequest, (error, response) => {\r",
											"  console.log(error ? error : response.json());\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"var reqBody = pm.request.body.raw;\r",
											"\r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Success\");\r",
											"    pm.expect(responseJson.errorMessage).to.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Delete\",\r\n            \"penaltyType\": \"prorate\",\r\n            \"penaltyGroupId\": \"{{DEL_penaltyGroupId}}\",\r\n            \"penaltyId\": \"{{DEL_penaltyId}}\",\r\n            \"penaltySeq\": \"{{DEL_penaltySeq}}\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"0\",\r\n            \"monthEnd\": \"2\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v4/evSyncContractPenaltyMaster",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v4",
										"evSyncContractPenaltyMaster"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete : Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson = pm.response.json();\r",
											"var reqBody = pm.request.body.raw;\r",
											"\r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"  var schema = JSON.parse(pm.environment.get(\"validat_schema\"));\r",
											"  pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response is Correct\", function () {\r",
											"    pm.expect(responseJson.status).to.equal(\"Success\");\r",
											"    pm.expect(responseJson.errorMessage).to.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var reqBody = {\r",
											"    \"penaltyList\": [\r",
											"        {\r",
											"            \"action\": \"Add\",\r",
											"            \"penaltyType\": \"prorate\",\r",
											"            \"penaltyGroupId\": pm.variables.replaceIn('PN'+'{{$timestamp}}'),\r",
											"            \"penaltyId\": pm.variables.replaceIn('{{$randomBankAccount}}'),\r",
											"            \"penaltySeq\": pm.variables.replaceIn('{{$randomInt}}'),\r",
											"            \"penaltyFee\": \"100.00\",\r",
											"            \"monthStart\": \"0\",\r",
											"            \"monthEnd\": \"2\",\r",
											"            \"createBy\": pm.environment.get(\"createBy\")\r",
											"        }\r",
											"    ],\r",
											"    \"sourceSystem\": pm.environment.get(\"sourceSystem\")\r",
											"}\r",
											"\r",
											"console.log(reqBody)\r",
											"pm.globals.set(\"DEL_penaltyGroupId\", reqBody.penaltyList[0].penaltyGroupId);\r",
											"pm.globals.set(\"DEL_penaltyId\", reqBody.penaltyList[0].penaltyId);\r",
											"pm.globals.set(\"DEL_penaltySeq\", reqBody.penaltyList[0].penaltySeq);\r",
											"\r",
											"const postRequest = {\r",
											"  url: pm.environment.get(\"url\")+pm.environment.get(\"_evSyncContractPenaltyMaster\"),\r",
											"  method: 'POST',\r",
											"  header: {\r",
											"    'Content-Type': 'application/json'\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw: JSON.stringify(reqBody)\r",
											"  }\r",
											"};\r",
											"pm.sendRequest(postRequest, (error, response) => {\r",
											"  console.log(error ? error : response.json());\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"penaltyList\": [\r\n        {\r\n            \"action\": \"Delete\",\r\n            \"penaltyType\": \"prorate\",\r\n            \"penaltyGroupId\": \"{{DEL_penaltyGroupId}}\",\r\n            \"penaltyId\": \"{{DEL_penaltyId}}\",\r\n            \"penaltySeq\": \"{{DEL_penaltySeq}}\",\r\n            \"penaltyFee\": \"100.00\",\r\n            \"monthStart\": \"0\",\r\n            \"monthEnd\": \"2\",\r\n            \"createBy\": \"{{createBy}}\"\r\n        }\r\n    ],\r\n    \"sourceSystem\": \"{{sourceSystem}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v4/evSyncContractPenaltyMaster",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v4",
										"evSyncContractPenaltyMaster"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}